// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace swgemurpcserver.rpc {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class InventoryItem {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_swgemurpcserver_rpc_CharacterInventoryItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.CharacterInventoryItem, global::swgemurpcserver.rpc.CharacterInventoryItem.Builder> internal__static_swgemurpcserver_rpc_CharacterInventoryItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_swgemurpcserver_rpc_ArmorItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.ArmorItem, global::swgemurpcserver.rpc.ArmorItem.Builder> internal__static_swgemurpcserver_rpc_ArmorItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_swgemurpcserver_rpc_WeaponItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.WeaponItem, global::swgemurpcserver.rpc.WeaponItem.Builder> internal__static_swgemurpcserver_rpc_WeaponItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_swgemurpcserver_rpc_ResourceContainerItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.ResourceContainerItem, global::swgemurpcserver.rpc.ResourceContainerItem.Builder> internal__static_swgemurpcserver_rpc_ResourceContainerItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_swgemurpcserver_rpc_ResourceAttribute__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.ResourceAttribute, global::swgemurpcserver.rpc.ResourceAttribute.Builder> internal__static_swgemurpcserver_rpc_ResourceAttribute__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_swgemurpcserver_rpc_ResourceSpawnClass__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.ResourceSpawnClass, global::swgemurpcserver.rpc.ResourceSpawnClass.Builder> internal__static_swgemurpcserver_rpc_ResourceSpawnClass__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_swgemurpcserver_rpc_FactoryCrateItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.FactoryCrateItem, global::swgemurpcserver.rpc.FactoryCrateItem.Builder> internal__static_swgemurpcserver_rpc_FactoryCrateItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_swgemurpcserver_rpc_PharmaceuticalItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.PharmaceuticalItem, global::swgemurpcserver.rpc.PharmaceuticalItem.Builder> internal__static_swgemurpcserver_rpc_PharmaceuticalItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_swgemurpcserver_rpc_RangedStimPackItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.RangedStimPackItem, global::swgemurpcserver.rpc.RangedStimPackItem.Builder> internal__static_swgemurpcserver_rpc_RangedStimPackItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_swgemurpcserver_rpc_DotPackItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.DotPackItem, global::swgemurpcserver.rpc.DotPackItem.Builder> internal__static_swgemurpcserver_rpc_DotPackItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_swgemurpcserver_rpc_EnhancePackItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.EnhancePackItem, global::swgemurpcserver.rpc.EnhancePackItem.Builder> internal__static_swgemurpcserver_rpc_EnhancePackItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_swgemurpcserver_rpc_RevivePackItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.RevivePackItem, global::swgemurpcserver.rpc.RevivePackItem.Builder> internal__static_swgemurpcserver_rpc_RevivePackItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_swgemurpcserver_rpc_WoundPackItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.WoundPackItem, global::swgemurpcserver.rpc.WoundPackItem.Builder> internal__static_swgemurpcserver_rpc_WoundPackItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_swgemurpcserver_rpc_CraftingComponentItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.CraftingComponentItem, global::swgemurpcserver.rpc.CraftingComponentItem.Builder> internal__static_swgemurpcserver_rpc_CraftingComponentItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_swgemurpcserver_rpc_CraftingComponentAttribute__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.CraftingComponentAttribute, global::swgemurpcserver.rpc.CraftingComponentAttribute.Builder> internal__static_swgemurpcserver_rpc_CraftingComponentAttribute__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_swgemurpcserver_rpc_ManufacturingSchematicItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.ManufacturingSchematicItem, global::swgemurpcserver.rpc.ManufacturingSchematicItem.Builder> internal__static_swgemurpcserver_rpc_ManufacturingSchematicItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_swgemurpcserver_rpc_IngredientItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.IngredientItem, global::swgemurpcserver.rpc.IngredientItem.Builder> internal__static_swgemurpcserver_rpc_IngredientItem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_swgemurpcserver_rpc_BlueprintEntryItem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.BlueprintEntryItem, global::swgemurpcserver.rpc.BlueprintEntryItem.Builder> internal__static_swgemurpcserver_rpc_BlueprintEntryItem__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static InventoryItem() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChNJbnZlbnRvcnlJdGVtLnByb3RvEhNzd2dlbXVycGNzZXJ2ZXIucnBjIpYG" + 
          "ChZDaGFyYWN0ZXJJbnZlbnRvcnlJdGVtEhEKCW9iamVjdF9pZBgBIAIoBhIc" + 
          "ChRhcHBlYXJhbmNlX2ZpbGVfbmFtZRgCIAIoCRITCgtvYmplY3RfbmFtZRgD" + 
          "IAIoCRIUCgxkaXNwbGF5X25hbWUYBCACKAkSEwoLZGVzY3JpcHRpb24YBSAC" + 
          "KAkSFAoMY3JhZnRlcl9uYW1lGAYgAigJEhUKDXNlcmlhbF9udW1iZXIYByAC" + 
          "KAkSFQoNbWF4X2NvbmRpdGlvbhgIIAEoBRIRCgljb25kaXRpb24YCSABKAUS" + 
          "HAoUY29udGFpbm1lbnRfbG9jYXRpb24YCiABKAcSGgoSdGVtcGxhdGVfZmls" + 
          "ZV9uYW1lGAsgASgJEhkKEXBvcnRhbHNfZmlsZV9uYW1lGAwgASgJEjUKDWFy" + 
          "bW9yX2RldGFpbHMYDSABKAsyHi5zd2dlbXVycGNzZXJ2ZXIucnBjLkFybW9y" + 
          "SXRlbRI3Cg53ZWFwb25fZGV0YWlscxgOIAEoCzIfLnN3Z2VtdXJwY3NlcnZl" + 
          "ci5ycGMuV2VhcG9uSXRlbRJEChByZXNvdXJjZV9kZXRhaWxzGA8gASgLMiou" + 
          "c3dnZW11cnBjc2VydmVyLnJwYy5SZXNvdXJjZUNvbnRhaW5lckl0ZW0SRAoV" + 
          "ZmFjdG9yeV9jcmF0ZV9kZXRhaWxzGBAgASgLMiUuc3dnZW11cnBjc2VydmVy" + 
          "LnJwYy5GYWN0b3J5Q3JhdGVJdGVtEkcKFnBoYXJtYWNldXRpY2FsX2RldGFp" + 
          "bHMYESABKAsyJy5zd2dlbXVycGNzZXJ2ZXIucnBjLlBoYXJtYWNldXRpY2Fs" + 
          "SXRlbRJOChpjcmFmdGluZ19jb21wb25lbnRfZGV0YWlscxgSIAEoCzIqLnN3" + 
          "Z2VtdXJwY3NlcnZlci5ycGMuQ3JhZnRpbmdDb21wb25lbnRJdGVtEkoKEW1m" + 
          "Z19zY2hlbV9kZXRhaWxzGBMgASgLMi8uc3dnZW11cnBjc2VydmVyLnJwYy5N" + 
          "YW51ZmFjdHVyaW5nU2NoZW1hdGljSXRlbSKaAgoJQXJtb3JJdGVtEg8KB2tp" + 
          "bmV0aWMYASACKAISDgoGZW5lcmd5GAIgAigCEhMKC2VsZWN0cmljaXR5GAMg" + 
          "AigCEgwKBHN0dW4YBCACKAISDQoFYmxhc3QYBSACKAISDAoEaGVhdBgGIAIo" + 
          "AhIMCgRjb2xkGAcgAigCEgwKBGFjaWQYCCACKAISEQoJbGlnaHNhYmVyGAkg" + 
          "AigCEhsKE2hlYWx0aF9lbmN1bWJlcmFuY2UYCiACKAUSGwoTYWN0aW9uX2Vu" + 
          "Y3VtYmVyYW5jZRgLIAIoBRIZChFtaW5kX2VuY3VtYmVyYW5jZRgMIAIoBRIO" + 
          "CgZyYXRpbmcYDSACKAUSGAoMaGl0X2xvY2F0aW9uGA4gAygFQgIQASK6AwoK" + 
          "V2VhcG9uSXRlbRIcChRwb2ludF9ibGFua19hY2N1cmFjeRgBIAIoBRIZChFw" + 
          "b2ludF9ibGFua19yYW5nZRgCIAIoBRITCgtpZGVhbF9yYW5nZRgDIAIoBRIR" + 
          "CgltYXhfcmFuZ2UYBCACKAUSFgoOaWRlYWxfYWNjdXJhY3kYBSACKAUSGgoS" + 
          "bWF4X3JhbmdlX2FjY3VyYWN5GAYgAigFEhYKDmFybW9yX3BpZXJjaW5nGAcg" + 
          "AigFEhQKDGF0dGFja19zcGVlZBgIIAIoAhISCgptYXhfZGFtYWdlGAkgAigC" + 
          "EhIKCm1pbl9kYW1hZ2UYCiACKAISEwoLd291bmRfcmF0aW8YCyACKAISFQoN" + 
          "ZGFtYWdlX3JhZGl1cxgMIAIoAhIaChJoZWFsdGhfYXR0YWNrX2Nvc3QYDSAC" + 
          "KAUSGgoSYWN0aW9uX2F0dGFja19jb3N0GA4gAigFEhgKEG1pbmRfYXR0YWNr" + 
          "X2Nvc3QYDyACKAUSGQoRZm9yY2VfYXR0YWNrX2Nvc3QYECACKAUSEwoLZGFt" + 
          "YWdlX3R5cGUYESACKAUSEwoLd2VhcG9uX3R5cGUYEiACKAkizQEKFVJlc291" + 
          "cmNlQ29udGFpbmVySXRlbRIMCgRuYW1lGAEgAigJEgwKBHR5cGUYAiACKAkS" + 
          "EwoLcmVzb3VyY2VfaWQYAyACKAYSDQoFY291bnQYBCACKAUSOAoHY2xhc3Nl" + 
          "cxgFIAMoCzInLnN3Z2VtdXJwY3NlcnZlci5ycGMuUmVzb3VyY2VTcGF3bkNs" + 
          "YXNzEjoKCmF0dHJpYnV0ZXMYBiADKAsyJi5zd2dlbXVycGNzZXJ2ZXIucnBj" + 
          "LlJlc291cmNlQXR0cmlidXRlIjAKEVJlc291cmNlQXR0cmlidXRlEgwKBG5h" + 
          "bWUYASACKAkSDQoFdmFsdWUYAiACKAUiOwoSUmVzb3VyY2VTcGF3bkNsYXNz" + 
          "EhIKCmNsYXNzX25hbWUYASACKAkSEQoJc3RmX2NsYXNzGAIgAigJInoKEEZh" + 
          "Y3RvcnlDcmF0ZUl0ZW0SDQoFY291bnQYASACKAUSEQoJbWF4X2l0ZW1zGAIg" + 
          "AigFEkQKD2NvbnRhaW5lZF9pdGVtcxgDIAIoCzIrLnN3Z2VtdXJwY3NlcnZl" + 
          "ci5ycGMuQ2hhcmFjdGVySW52ZW50b3J5SXRlbSKkBQoSUGhhcm1hY2V1dGlj" + 
          "YWxJdGVtElMKC3BoYXJtYV90eXBlGAEgAigOMj4uc3dnZW11cnBjc2VydmVy" + 
          "LnJwYy5QaGFybWFjZXV0aWNhbEl0ZW0uUGhhcm1hY2V1dGljYWxJdGVtVHlw" + 
          "ZRIVCg1lZmZlY3RpdmVuZXNzGAIgAigCEgwKBGFyZWEYAyACKAISGQoRbWVk" + 
          "aWNpbmVfcmVxdWlyZWQYBCACKAUSEQoJdXNlX2NvdW50GAUgAigFEkQKE3Jh" + 
          "bmdlZF9zdGltX2RldGFpbHMYBiABKAsyJy5zd2dlbXVycGNzZXJ2ZXIucnBj" + 
          "LlJhbmdlZFN0aW1QYWNrSXRlbRI6ChBkb3RfcGFja19kZXRhaWxzGAcgASgL" + 
          "MiAuc3dnZW11cnBjc2VydmVyLnJwYy5Eb3RQYWNrSXRlbRJCChRlbmhhbmNl" + 
          "X3BhY2tfZGV0YWlscxgIIAEoCzIkLnN3Z2VtdXJwY3NlcnZlci5ycGMuRW5o" + 
          "YW5jZVBhY2tJdGVtEkEKFHJldml2aWVfcGFja19kZXRhaWxzGAkgASgLMiMu" + 
          "c3dnZW11cnBjc2VydmVyLnJwYy5SZXZpdmVQYWNrSXRlbRI+ChJ3b3VuZF9w" + 
          "YWNrX2RldGFpbHMYCiABKAsyIi5zd2dlbXVycGNzZXJ2ZXIucnBjLldvdW5k" + 
          "UGFja0l0ZW0inAEKFlBoYXJtYWNldXRpY2FsSXRlbVR5cGUSFAoHVU5LTk9X" + 
          "ThD///////////8BEgwKCENVUkVQQUNLEAASCwoHRE9UUEFDSxABEg8KC0VO" + 
          "SEFOQ0VQQUNLEAISEgoOUkFOR0VEU1RJTVBBQ0sQAxIPCgtSRVZJVklFUEFD" + 
          "SxAEEgwKCFNUSU1QQUNLEAUSDQoJV09VTkRQQUNLEAYiJwoSUmFuZ2VkU3Rp" + 
          "bVBhY2tJdGVtEhEKCXJhbmdlX21vZBgBIAIoAiJ7CgtEb3RQYWNrSXRlbRIP" + 
          "Cgdwb3RlbmN5GAEgAigCEhAKCGR1cmF0aW9uGAIgAigHEgwKBHBvb2wYAyAC" + 
          "KAkSEAoIZG90X3R5cGUYBCACKAcSEwoLcG9pc29uX3VuaXQYBSACKAgSFAoM" + 
          "ZGlzZWFzZV91bml0GAYgAigIIjYKD0VuaGFuY2VQYWNrSXRlbRIQCghkdXJh" + 
          "dGlvbhgBIAIoAhIRCglhdHRyaWJ1dGUYAiACKAkiqAEKDlJldml2ZVBhY2tJ" + 
          "dGVtEhsKE2hlYWx0aF93b3VuZF9oZWFsZWQYASACKAISFQoNaGVhbHRoX2hl" + 
          "YWxlZBgCIAIoAhIbChNhY3Rpb25fd291bmRfaGVhbGVkGAMgAigCEhUKDWFj" + 
          "dGlvbl9oZWFsZWQYBCACKAISGQoRbWluZF93b3VuZF9oZWFsZWQYBSACKAIS" + 
          "EwoLbWluZF9oZWFsZWQYBiACKAIiIgoNV291bmRQYWNrSXRlbRIRCglhdHRy" + 
          "aWJ1dGUYASACKAkiXAoVQ3JhZnRpbmdDb21wb25lbnRJdGVtEkMKCmF0dHJp" + 
          "YnV0ZXMYASADKAsyLy5zd2dlbXVycGNzZXJ2ZXIucnBjLkNyYWZ0aW5nQ29t" + 
          "cG9uZW50QXR0cmlidXRlImgKGkNyYWZ0aW5nQ29tcG9uZW50QXR0cmlidXRl" + 
          "EgoKAmlkGAEgAigJEgwKBHRpdGUYAiACKAkSEQoJcHJlY2lzaW9uGAMgAigF" + 
          "Eg0KBXZhbHVlGAQgAigCEg4KBmhpZGRlbhgFIAIoCCL9AQoaTWFudWZhY3R1" + 
          "cmluZ1NjaGVtYXRpY0l0ZW0SGQoRbWFudWZhY3R1cmVfbGltaXQYASACKAUS" + 
          "RgoRcHJvdG90eXBlX2RldGFpbHMYAiACKAsyKy5zd2dlbXVycGNzZXJ2ZXIu" + 
          "cnBjLkNoYXJhY3RlckludmVudG9yeUl0ZW0SQgoRYmx1ZXByaW50X2VudHJp" + 
          "ZXMYAyADKAsyJy5zd2dlbXVycGNzZXJ2ZXIucnBjLkJsdWVwcmludEVudHJ5" + 
          "SXRlbRI4CgtpbmdyZWRpZW50cxgEIAMoCzIjLnN3Z2VtdXJwY3NlcnZlci5y" + 
          "cGMuSW5ncmVkaWVudEl0ZW0inQEKDkluZ3JlZGllbnRJdGVtEhkKEXJlcXVp" + 
          "cmVkX3F1YW50aXR5GAEgAigFEhEKCWlkZW50aWNhbBgCIAIoCBIcChRpbmdy" + 
          "ZWRpZW50X3Nsb3RfbmFtZRgDIAIoCRI/CgppbmdyZWRpZW50GAQgAigLMisu" + 
          "c3dnZW11cnBjc2VydmVyLnJwYy5DaGFyYWN0ZXJJbnZlbnRvcnlJdGVtInoK" + 
          "EkJsdWVwcmludEVudHJ5SXRlbRIMCgR0eXBlGAEgAigJEgsKA2tleRgCIAIo" + 
          "CRIOCgZzZXJpYWwYAyACKAkSFAoMZGlzcGxheV9uYW1lGAQgAigJEhAKCHF1" + 
          "YW50aXR5GAUgAigFEhEKCWlkZW50aWNhbBgGIAIoCA==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_swgemurpcserver_rpc_CharacterInventoryItem__Descriptor = Descriptor.MessageTypes[0];
        internal__static_swgemurpcserver_rpc_CharacterInventoryItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.CharacterInventoryItem, global::swgemurpcserver.rpc.CharacterInventoryItem.Builder>(internal__static_swgemurpcserver_rpc_CharacterInventoryItem__Descriptor,
                new string[] { "ObjectId", "AppearanceFileName", "ObjectName", "DisplayName", "Description", "CrafterName", "SerialNumber", "MaxCondition", "Condition", "ContainmentLocation", "TemplateFileName", "PortalsFileName", "ArmorDetails", "WeaponDetails", "ResourceDetails", "FactoryCrateDetails", "PharmaceuticalDetails", "CraftingComponentDetails", "MfgSchemDetails", });
        internal__static_swgemurpcserver_rpc_ArmorItem__Descriptor = Descriptor.MessageTypes[1];
        internal__static_swgemurpcserver_rpc_ArmorItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.ArmorItem, global::swgemurpcserver.rpc.ArmorItem.Builder>(internal__static_swgemurpcserver_rpc_ArmorItem__Descriptor,
                new string[] { "Kinetic", "Energy", "Electricity", "Stun", "Blast", "Heat", "Cold", "Acid", "Lighsaber", "HealthEncumberance", "ActionEncumberance", "MindEncumberance", "Rating", "HitLocation", });
        internal__static_swgemurpcserver_rpc_WeaponItem__Descriptor = Descriptor.MessageTypes[2];
        internal__static_swgemurpcserver_rpc_WeaponItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.WeaponItem, global::swgemurpcserver.rpc.WeaponItem.Builder>(internal__static_swgemurpcserver_rpc_WeaponItem__Descriptor,
                new string[] { "PointBlankAccuracy", "PointBlankRange", "IdealRange", "MaxRange", "IdealAccuracy", "MaxRangeAccuracy", "ArmorPiercing", "AttackSpeed", "MaxDamage", "MinDamage", "WoundRatio", "DamageRadius", "HealthAttackCost", "ActionAttackCost", "MindAttackCost", "ForceAttackCost", "DamageType", "WeaponType", });
        internal__static_swgemurpcserver_rpc_ResourceContainerItem__Descriptor = Descriptor.MessageTypes[3];
        internal__static_swgemurpcserver_rpc_ResourceContainerItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.ResourceContainerItem, global::swgemurpcserver.rpc.ResourceContainerItem.Builder>(internal__static_swgemurpcserver_rpc_ResourceContainerItem__Descriptor,
                new string[] { "Name", "Type", "ResourceId", "Count", "Classes", "Attributes", });
        internal__static_swgemurpcserver_rpc_ResourceAttribute__Descriptor = Descriptor.MessageTypes[4];
        internal__static_swgemurpcserver_rpc_ResourceAttribute__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.ResourceAttribute, global::swgemurpcserver.rpc.ResourceAttribute.Builder>(internal__static_swgemurpcserver_rpc_ResourceAttribute__Descriptor,
                new string[] { "Name", "Value", });
        internal__static_swgemurpcserver_rpc_ResourceSpawnClass__Descriptor = Descriptor.MessageTypes[5];
        internal__static_swgemurpcserver_rpc_ResourceSpawnClass__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.ResourceSpawnClass, global::swgemurpcserver.rpc.ResourceSpawnClass.Builder>(internal__static_swgemurpcserver_rpc_ResourceSpawnClass__Descriptor,
                new string[] { "ClassName", "StfClass", });
        internal__static_swgemurpcserver_rpc_FactoryCrateItem__Descriptor = Descriptor.MessageTypes[6];
        internal__static_swgemurpcserver_rpc_FactoryCrateItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.FactoryCrateItem, global::swgemurpcserver.rpc.FactoryCrateItem.Builder>(internal__static_swgemurpcserver_rpc_FactoryCrateItem__Descriptor,
                new string[] { "Count", "MaxItems", "ContainedItems", });
        internal__static_swgemurpcserver_rpc_PharmaceuticalItem__Descriptor = Descriptor.MessageTypes[7];
        internal__static_swgemurpcserver_rpc_PharmaceuticalItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.PharmaceuticalItem, global::swgemurpcserver.rpc.PharmaceuticalItem.Builder>(internal__static_swgemurpcserver_rpc_PharmaceuticalItem__Descriptor,
                new string[] { "PharmaType", "Effectiveness", "Area", "MedicineRequired", "UseCount", "RangedStimDetails", "DotPackDetails", "EnhancePackDetails", "ReviviePackDetails", "WoundPackDetails", });
        internal__static_swgemurpcserver_rpc_RangedStimPackItem__Descriptor = Descriptor.MessageTypes[8];
        internal__static_swgemurpcserver_rpc_RangedStimPackItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.RangedStimPackItem, global::swgemurpcserver.rpc.RangedStimPackItem.Builder>(internal__static_swgemurpcserver_rpc_RangedStimPackItem__Descriptor,
                new string[] { "RangeMod", });
        internal__static_swgemurpcserver_rpc_DotPackItem__Descriptor = Descriptor.MessageTypes[9];
        internal__static_swgemurpcserver_rpc_DotPackItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.DotPackItem, global::swgemurpcserver.rpc.DotPackItem.Builder>(internal__static_swgemurpcserver_rpc_DotPackItem__Descriptor,
                new string[] { "Potency", "Duration", "Pool", "DotType", "PoisonUnit", "DiseaseUnit", });
        internal__static_swgemurpcserver_rpc_EnhancePackItem__Descriptor = Descriptor.MessageTypes[10];
        internal__static_swgemurpcserver_rpc_EnhancePackItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.EnhancePackItem, global::swgemurpcserver.rpc.EnhancePackItem.Builder>(internal__static_swgemurpcserver_rpc_EnhancePackItem__Descriptor,
                new string[] { "Duration", "Attribute", });
        internal__static_swgemurpcserver_rpc_RevivePackItem__Descriptor = Descriptor.MessageTypes[11];
        internal__static_swgemurpcserver_rpc_RevivePackItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.RevivePackItem, global::swgemurpcserver.rpc.RevivePackItem.Builder>(internal__static_swgemurpcserver_rpc_RevivePackItem__Descriptor,
                new string[] { "HealthWoundHealed", "HealthHealed", "ActionWoundHealed", "ActionHealed", "MindWoundHealed", "MindHealed", });
        internal__static_swgemurpcserver_rpc_WoundPackItem__Descriptor = Descriptor.MessageTypes[12];
        internal__static_swgemurpcserver_rpc_WoundPackItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.WoundPackItem, global::swgemurpcserver.rpc.WoundPackItem.Builder>(internal__static_swgemurpcserver_rpc_WoundPackItem__Descriptor,
                new string[] { "Attribute", });
        internal__static_swgemurpcserver_rpc_CraftingComponentItem__Descriptor = Descriptor.MessageTypes[13];
        internal__static_swgemurpcserver_rpc_CraftingComponentItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.CraftingComponentItem, global::swgemurpcserver.rpc.CraftingComponentItem.Builder>(internal__static_swgemurpcserver_rpc_CraftingComponentItem__Descriptor,
                new string[] { "Attributes", });
        internal__static_swgemurpcserver_rpc_CraftingComponentAttribute__Descriptor = Descriptor.MessageTypes[14];
        internal__static_swgemurpcserver_rpc_CraftingComponentAttribute__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.CraftingComponentAttribute, global::swgemurpcserver.rpc.CraftingComponentAttribute.Builder>(internal__static_swgemurpcserver_rpc_CraftingComponentAttribute__Descriptor,
                new string[] { "Id", "Tite", "Precision", "Value", "Hidden", });
        internal__static_swgemurpcserver_rpc_ManufacturingSchematicItem__Descriptor = Descriptor.MessageTypes[15];
        internal__static_swgemurpcserver_rpc_ManufacturingSchematicItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.ManufacturingSchematicItem, global::swgemurpcserver.rpc.ManufacturingSchematicItem.Builder>(internal__static_swgemurpcserver_rpc_ManufacturingSchematicItem__Descriptor,
                new string[] { "ManufactureLimit", "PrototypeDetails", "BlueprintEntries", "Ingredients", });
        internal__static_swgemurpcserver_rpc_IngredientItem__Descriptor = Descriptor.MessageTypes[16];
        internal__static_swgemurpcserver_rpc_IngredientItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.IngredientItem, global::swgemurpcserver.rpc.IngredientItem.Builder>(internal__static_swgemurpcserver_rpc_IngredientItem__Descriptor,
                new string[] { "RequiredQuantity", "Identical", "IngredientSlotName", "Ingredient", });
        internal__static_swgemurpcserver_rpc_BlueprintEntryItem__Descriptor = Descriptor.MessageTypes[17];
        internal__static_swgemurpcserver_rpc_BlueprintEntryItem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::swgemurpcserver.rpc.BlueprintEntryItem, global::swgemurpcserver.rpc.BlueprintEntryItem.Builder>(internal__static_swgemurpcserver_rpc_BlueprintEntryItem__Descriptor,
                new string[] { "Type", "Key", "Serial", "DisplayName", "Quantity", "Identical", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CharacterInventoryItem : pb::GeneratedMessage<CharacterInventoryItem, CharacterInventoryItem.Builder> {
    private CharacterInventoryItem() { }
    private static readonly CharacterInventoryItem defaultInstance = new CharacterInventoryItem().MakeReadOnly();
    private static readonly string[] _characterInventoryItemFieldNames = new string[] { "appearance_file_name", "armor_details", "condition", "containment_location", "crafter_name", "crafting_component_details", "description", "display_name", "factory_crate_details", "max_condition", "mfg_schem_details", "object_id", "object_name", "pharmaceutical_details", "portals_file_name", "resource_details", "serial_number", "template_file_name", "weapon_details" };
    private static readonly uint[] _characterInventoryItemFieldTags = new uint[] { 18, 106, 72, 85, 50, 146, 42, 34, 130, 64, 154, 9, 26, 138, 98, 122, 58, 90, 114 };
    public static CharacterInventoryItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CharacterInventoryItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CharacterInventoryItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_CharacterInventoryItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CharacterInventoryItem, CharacterInventoryItem.Builder> InternalFieldAccessors {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_CharacterInventoryItem__FieldAccessorTable; }
    }
    
    public const int ObjectIdFieldNumber = 1;
    private bool hasObjectId;
    private ulong objectId_;
    public bool HasObjectId {
      get { return hasObjectId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ObjectId {
      get { return objectId_; }
    }
    
    public const int AppearanceFileNameFieldNumber = 2;
    private bool hasAppearanceFileName;
    private string appearanceFileName_ = "";
    public bool HasAppearanceFileName {
      get { return hasAppearanceFileName; }
    }
    public string AppearanceFileName {
      get { return appearanceFileName_; }
    }
    
    public const int ObjectNameFieldNumber = 3;
    private bool hasObjectName;
    private string objectName_ = "";
    public bool HasObjectName {
      get { return hasObjectName; }
    }
    public string ObjectName {
      get { return objectName_; }
    }
    
    public const int DisplayNameFieldNumber = 4;
    private bool hasDisplayName;
    private string displayName_ = "";
    public bool HasDisplayName {
      get { return hasDisplayName; }
    }
    public string DisplayName {
      get { return displayName_; }
    }
    
    public const int DescriptionFieldNumber = 5;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public const int CrafterNameFieldNumber = 6;
    private bool hasCrafterName;
    private string crafterName_ = "";
    public bool HasCrafterName {
      get { return hasCrafterName; }
    }
    public string CrafterName {
      get { return crafterName_; }
    }
    
    public const int SerialNumberFieldNumber = 7;
    private bool hasSerialNumber;
    private string serialNumber_ = "";
    public bool HasSerialNumber {
      get { return hasSerialNumber; }
    }
    public string SerialNumber {
      get { return serialNumber_; }
    }
    
    public const int MaxConditionFieldNumber = 8;
    private bool hasMaxCondition;
    private int maxCondition_;
    public bool HasMaxCondition {
      get { return hasMaxCondition; }
    }
    public int MaxCondition {
      get { return maxCondition_; }
    }
    
    public const int ConditionFieldNumber = 9;
    private bool hasCondition;
    private int condition_;
    public bool HasCondition {
      get { return hasCondition; }
    }
    public int Condition {
      get { return condition_; }
    }
    
    public const int ContainmentLocationFieldNumber = 10;
    private bool hasContainmentLocation;
    private uint containmentLocation_;
    public bool HasContainmentLocation {
      get { return hasContainmentLocation; }
    }
    [global::System.CLSCompliant(false)]
    public uint ContainmentLocation {
      get { return containmentLocation_; }
    }
    
    public const int TemplateFileNameFieldNumber = 11;
    private bool hasTemplateFileName;
    private string templateFileName_ = "";
    public bool HasTemplateFileName {
      get { return hasTemplateFileName; }
    }
    public string TemplateFileName {
      get { return templateFileName_; }
    }
    
    public const int PortalsFileNameFieldNumber = 12;
    private bool hasPortalsFileName;
    private string portalsFileName_ = "";
    public bool HasPortalsFileName {
      get { return hasPortalsFileName; }
    }
    public string PortalsFileName {
      get { return portalsFileName_; }
    }
    
    public const int ArmorDetailsFieldNumber = 13;
    private bool hasArmorDetails;
    private global::swgemurpcserver.rpc.ArmorItem armorDetails_;
    public bool HasArmorDetails {
      get { return hasArmorDetails; }
    }
    public global::swgemurpcserver.rpc.ArmorItem ArmorDetails {
      get { return armorDetails_ ?? global::swgemurpcserver.rpc.ArmorItem.DefaultInstance; }
    }
    
    public const int WeaponDetailsFieldNumber = 14;
    private bool hasWeaponDetails;
    private global::swgemurpcserver.rpc.WeaponItem weaponDetails_;
    public bool HasWeaponDetails {
      get { return hasWeaponDetails; }
    }
    public global::swgemurpcserver.rpc.WeaponItem WeaponDetails {
      get { return weaponDetails_ ?? global::swgemurpcserver.rpc.WeaponItem.DefaultInstance; }
    }
    
    public const int ResourceDetailsFieldNumber = 15;
    private bool hasResourceDetails;
    private global::swgemurpcserver.rpc.ResourceContainerItem resourceDetails_;
    public bool HasResourceDetails {
      get { return hasResourceDetails; }
    }
    public global::swgemurpcserver.rpc.ResourceContainerItem ResourceDetails {
      get { return resourceDetails_ ?? global::swgemurpcserver.rpc.ResourceContainerItem.DefaultInstance; }
    }
    
    public const int FactoryCrateDetailsFieldNumber = 16;
    private bool hasFactoryCrateDetails;
    private global::swgemurpcserver.rpc.FactoryCrateItem factoryCrateDetails_;
    public bool HasFactoryCrateDetails {
      get { return hasFactoryCrateDetails; }
    }
    public global::swgemurpcserver.rpc.FactoryCrateItem FactoryCrateDetails {
      get { return factoryCrateDetails_ ?? global::swgemurpcserver.rpc.FactoryCrateItem.DefaultInstance; }
    }
    
    public const int PharmaceuticalDetailsFieldNumber = 17;
    private bool hasPharmaceuticalDetails;
    private global::swgemurpcserver.rpc.PharmaceuticalItem pharmaceuticalDetails_;
    public bool HasPharmaceuticalDetails {
      get { return hasPharmaceuticalDetails; }
    }
    public global::swgemurpcserver.rpc.PharmaceuticalItem PharmaceuticalDetails {
      get { return pharmaceuticalDetails_ ?? global::swgemurpcserver.rpc.PharmaceuticalItem.DefaultInstance; }
    }
    
    public const int CraftingComponentDetailsFieldNumber = 18;
    private bool hasCraftingComponentDetails;
    private global::swgemurpcserver.rpc.CraftingComponentItem craftingComponentDetails_;
    public bool HasCraftingComponentDetails {
      get { return hasCraftingComponentDetails; }
    }
    public global::swgemurpcserver.rpc.CraftingComponentItem CraftingComponentDetails {
      get { return craftingComponentDetails_ ?? global::swgemurpcserver.rpc.CraftingComponentItem.DefaultInstance; }
    }
    
    public const int MfgSchemDetailsFieldNumber = 19;
    private bool hasMfgSchemDetails;
    private global::swgemurpcserver.rpc.ManufacturingSchematicItem mfgSchemDetails_;
    public bool HasMfgSchemDetails {
      get { return hasMfgSchemDetails; }
    }
    public global::swgemurpcserver.rpc.ManufacturingSchematicItem MfgSchemDetails {
      get { return mfgSchemDetails_ ?? global::swgemurpcserver.rpc.ManufacturingSchematicItem.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasObjectId) return false;
        if (!hasAppearanceFileName) return false;
        if (!hasObjectName) return false;
        if (!hasDisplayName) return false;
        if (!hasDescription) return false;
        if (!hasCrafterName) return false;
        if (!hasSerialNumber) return false;
        if (HasArmorDetails) {
          if (!ArmorDetails.IsInitialized) return false;
        }
        if (HasWeaponDetails) {
          if (!WeaponDetails.IsInitialized) return false;
        }
        if (HasResourceDetails) {
          if (!ResourceDetails.IsInitialized) return false;
        }
        if (HasFactoryCrateDetails) {
          if (!FactoryCrateDetails.IsInitialized) return false;
        }
        if (HasPharmaceuticalDetails) {
          if (!PharmaceuticalDetails.IsInitialized) return false;
        }
        if (HasCraftingComponentDetails) {
          if (!CraftingComponentDetails.IsInitialized) return false;
        }
        if (HasMfgSchemDetails) {
          if (!MfgSchemDetails.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _characterInventoryItemFieldNames;
      if (hasObjectId) {
        output.WriteFixed64(1, field_names[11], ObjectId);
      }
      if (hasAppearanceFileName) {
        output.WriteString(2, field_names[0], AppearanceFileName);
      }
      if (hasObjectName) {
        output.WriteString(3, field_names[12], ObjectName);
      }
      if (hasDisplayName) {
        output.WriteString(4, field_names[7], DisplayName);
      }
      if (hasDescription) {
        output.WriteString(5, field_names[6], Description);
      }
      if (hasCrafterName) {
        output.WriteString(6, field_names[4], CrafterName);
      }
      if (hasSerialNumber) {
        output.WriteString(7, field_names[16], SerialNumber);
      }
      if (hasMaxCondition) {
        output.WriteInt32(8, field_names[9], MaxCondition);
      }
      if (hasCondition) {
        output.WriteInt32(9, field_names[2], Condition);
      }
      if (hasContainmentLocation) {
        output.WriteFixed32(10, field_names[3], ContainmentLocation);
      }
      if (hasTemplateFileName) {
        output.WriteString(11, field_names[17], TemplateFileName);
      }
      if (hasPortalsFileName) {
        output.WriteString(12, field_names[14], PortalsFileName);
      }
      if (hasArmorDetails) {
        output.WriteMessage(13, field_names[1], ArmorDetails);
      }
      if (hasWeaponDetails) {
        output.WriteMessage(14, field_names[18], WeaponDetails);
      }
      if (hasResourceDetails) {
        output.WriteMessage(15, field_names[15], ResourceDetails);
      }
      if (hasFactoryCrateDetails) {
        output.WriteMessage(16, field_names[8], FactoryCrateDetails);
      }
      if (hasPharmaceuticalDetails) {
        output.WriteMessage(17, field_names[13], PharmaceuticalDetails);
      }
      if (hasCraftingComponentDetails) {
        output.WriteMessage(18, field_names[5], CraftingComponentDetails);
      }
      if (hasMfgSchemDetails) {
        output.WriteMessage(19, field_names[10], MfgSchemDetails);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasObjectId) {
          size += pb::CodedOutputStream.ComputeFixed64Size(1, ObjectId);
        }
        if (hasAppearanceFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, AppearanceFileName);
        }
        if (hasObjectName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, ObjectName);
        }
        if (hasDisplayName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, DisplayName);
        }
        if (hasDescription) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Description);
        }
        if (hasCrafterName) {
          size += pb::CodedOutputStream.ComputeStringSize(6, CrafterName);
        }
        if (hasSerialNumber) {
          size += pb::CodedOutputStream.ComputeStringSize(7, SerialNumber);
        }
        if (hasMaxCondition) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, MaxCondition);
        }
        if (hasCondition) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, Condition);
        }
        if (hasContainmentLocation) {
          size += pb::CodedOutputStream.ComputeFixed32Size(10, ContainmentLocation);
        }
        if (hasTemplateFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(11, TemplateFileName);
        }
        if (hasPortalsFileName) {
          size += pb::CodedOutputStream.ComputeStringSize(12, PortalsFileName);
        }
        if (hasArmorDetails) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, ArmorDetails);
        }
        if (hasWeaponDetails) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, WeaponDetails);
        }
        if (hasResourceDetails) {
          size += pb::CodedOutputStream.ComputeMessageSize(15, ResourceDetails);
        }
        if (hasFactoryCrateDetails) {
          size += pb::CodedOutputStream.ComputeMessageSize(16, FactoryCrateDetails);
        }
        if (hasPharmaceuticalDetails) {
          size += pb::CodedOutputStream.ComputeMessageSize(17, PharmaceuticalDetails);
        }
        if (hasCraftingComponentDetails) {
          size += pb::CodedOutputStream.ComputeMessageSize(18, CraftingComponentDetails);
        }
        if (hasMfgSchemDetails) {
          size += pb::CodedOutputStream.ComputeMessageSize(19, MfgSchemDetails);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CharacterInventoryItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CharacterInventoryItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CharacterInventoryItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CharacterInventoryItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CharacterInventoryItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CharacterInventoryItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CharacterInventoryItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CharacterInventoryItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CharacterInventoryItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CharacterInventoryItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CharacterInventoryItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CharacterInventoryItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CharacterInventoryItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CharacterInventoryItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CharacterInventoryItem result;
      
      private CharacterInventoryItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CharacterInventoryItem original = result;
          result = new CharacterInventoryItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CharacterInventoryItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::swgemurpcserver.rpc.CharacterInventoryItem.Descriptor; }
      }
      
      public override CharacterInventoryItem DefaultInstanceForType {
        get { return global::swgemurpcserver.rpc.CharacterInventoryItem.DefaultInstance; }
      }
      
      public override CharacterInventoryItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CharacterInventoryItem) {
          return MergeFrom((CharacterInventoryItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CharacterInventoryItem other) {
        if (other == global::swgemurpcserver.rpc.CharacterInventoryItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasObjectId) {
          ObjectId = other.ObjectId;
        }
        if (other.HasAppearanceFileName) {
          AppearanceFileName = other.AppearanceFileName;
        }
        if (other.HasObjectName) {
          ObjectName = other.ObjectName;
        }
        if (other.HasDisplayName) {
          DisplayName = other.DisplayName;
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        if (other.HasCrafterName) {
          CrafterName = other.CrafterName;
        }
        if (other.HasSerialNumber) {
          SerialNumber = other.SerialNumber;
        }
        if (other.HasMaxCondition) {
          MaxCondition = other.MaxCondition;
        }
        if (other.HasCondition) {
          Condition = other.Condition;
        }
        if (other.HasContainmentLocation) {
          ContainmentLocation = other.ContainmentLocation;
        }
        if (other.HasTemplateFileName) {
          TemplateFileName = other.TemplateFileName;
        }
        if (other.HasPortalsFileName) {
          PortalsFileName = other.PortalsFileName;
        }
        if (other.HasArmorDetails) {
          MergeArmorDetails(other.ArmorDetails);
        }
        if (other.HasWeaponDetails) {
          MergeWeaponDetails(other.WeaponDetails);
        }
        if (other.HasResourceDetails) {
          MergeResourceDetails(other.ResourceDetails);
        }
        if (other.HasFactoryCrateDetails) {
          MergeFactoryCrateDetails(other.FactoryCrateDetails);
        }
        if (other.HasPharmaceuticalDetails) {
          MergePharmaceuticalDetails(other.PharmaceuticalDetails);
        }
        if (other.HasCraftingComponentDetails) {
          MergeCraftingComponentDetails(other.CraftingComponentDetails);
        }
        if (other.HasMfgSchemDetails) {
          MergeMfgSchemDetails(other.MfgSchemDetails);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_characterInventoryItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _characterInventoryItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 9: {
              result.hasObjectId = input.ReadFixed64(ref result.objectId_);
              break;
            }
            case 18: {
              result.hasAppearanceFileName = input.ReadString(ref result.appearanceFileName_);
              break;
            }
            case 26: {
              result.hasObjectName = input.ReadString(ref result.objectName_);
              break;
            }
            case 34: {
              result.hasDisplayName = input.ReadString(ref result.displayName_);
              break;
            }
            case 42: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
            case 50: {
              result.hasCrafterName = input.ReadString(ref result.crafterName_);
              break;
            }
            case 58: {
              result.hasSerialNumber = input.ReadString(ref result.serialNumber_);
              break;
            }
            case 64: {
              result.hasMaxCondition = input.ReadInt32(ref result.maxCondition_);
              break;
            }
            case 72: {
              result.hasCondition = input.ReadInt32(ref result.condition_);
              break;
            }
            case 85: {
              result.hasContainmentLocation = input.ReadFixed32(ref result.containmentLocation_);
              break;
            }
            case 90: {
              result.hasTemplateFileName = input.ReadString(ref result.templateFileName_);
              break;
            }
            case 98: {
              result.hasPortalsFileName = input.ReadString(ref result.portalsFileName_);
              break;
            }
            case 106: {
              global::swgemurpcserver.rpc.ArmorItem.Builder subBuilder = global::swgemurpcserver.rpc.ArmorItem.CreateBuilder();
              if (result.hasArmorDetails) {
                subBuilder.MergeFrom(ArmorDetails);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ArmorDetails = subBuilder.BuildPartial();
              break;
            }
            case 114: {
              global::swgemurpcserver.rpc.WeaponItem.Builder subBuilder = global::swgemurpcserver.rpc.WeaponItem.CreateBuilder();
              if (result.hasWeaponDetails) {
                subBuilder.MergeFrom(WeaponDetails);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              WeaponDetails = subBuilder.BuildPartial();
              break;
            }
            case 122: {
              global::swgemurpcserver.rpc.ResourceContainerItem.Builder subBuilder = global::swgemurpcserver.rpc.ResourceContainerItem.CreateBuilder();
              if (result.hasResourceDetails) {
                subBuilder.MergeFrom(ResourceDetails);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ResourceDetails = subBuilder.BuildPartial();
              break;
            }
            case 130: {
              global::swgemurpcserver.rpc.FactoryCrateItem.Builder subBuilder = global::swgemurpcserver.rpc.FactoryCrateItem.CreateBuilder();
              if (result.hasFactoryCrateDetails) {
                subBuilder.MergeFrom(FactoryCrateDetails);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FactoryCrateDetails = subBuilder.BuildPartial();
              break;
            }
            case 138: {
              global::swgemurpcserver.rpc.PharmaceuticalItem.Builder subBuilder = global::swgemurpcserver.rpc.PharmaceuticalItem.CreateBuilder();
              if (result.hasPharmaceuticalDetails) {
                subBuilder.MergeFrom(PharmaceuticalDetails);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PharmaceuticalDetails = subBuilder.BuildPartial();
              break;
            }
            case 146: {
              global::swgemurpcserver.rpc.CraftingComponentItem.Builder subBuilder = global::swgemurpcserver.rpc.CraftingComponentItem.CreateBuilder();
              if (result.hasCraftingComponentDetails) {
                subBuilder.MergeFrom(CraftingComponentDetails);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CraftingComponentDetails = subBuilder.BuildPartial();
              break;
            }
            case 154: {
              global::swgemurpcserver.rpc.ManufacturingSchematicItem.Builder subBuilder = global::swgemurpcserver.rpc.ManufacturingSchematicItem.CreateBuilder();
              if (result.hasMfgSchemDetails) {
                subBuilder.MergeFrom(MfgSchemDetails);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MfgSchemDetails = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasObjectId {
        get { return result.hasObjectId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong ObjectId {
        get { return result.ObjectId; }
        set { SetObjectId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetObjectId(ulong value) {
        PrepareBuilder();
        result.hasObjectId = true;
        result.objectId_ = value;
        return this;
      }
      public Builder ClearObjectId() {
        PrepareBuilder();
        result.hasObjectId = false;
        result.objectId_ = 0;
        return this;
      }
      
      public bool HasAppearanceFileName {
        get { return result.hasAppearanceFileName; }
      }
      public string AppearanceFileName {
        get { return result.AppearanceFileName; }
        set { SetAppearanceFileName(value); }
      }
      public Builder SetAppearanceFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppearanceFileName = true;
        result.appearanceFileName_ = value;
        return this;
      }
      public Builder ClearAppearanceFileName() {
        PrepareBuilder();
        result.hasAppearanceFileName = false;
        result.appearanceFileName_ = "";
        return this;
      }
      
      public bool HasObjectName {
        get { return result.hasObjectName; }
      }
      public string ObjectName {
        get { return result.ObjectName; }
        set { SetObjectName(value); }
      }
      public Builder SetObjectName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasObjectName = true;
        result.objectName_ = value;
        return this;
      }
      public Builder ClearObjectName() {
        PrepareBuilder();
        result.hasObjectName = false;
        result.objectName_ = "";
        return this;
      }
      
      public bool HasDisplayName {
        get { return result.hasDisplayName; }
      }
      public string DisplayName {
        get { return result.DisplayName; }
        set { SetDisplayName(value); }
      }
      public Builder SetDisplayName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDisplayName = true;
        result.displayName_ = value;
        return this;
      }
      public Builder ClearDisplayName() {
        PrepareBuilder();
        result.hasDisplayName = false;
        result.displayName_ = "";
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
      
      public bool HasCrafterName {
        get { return result.hasCrafterName; }
      }
      public string CrafterName {
        get { return result.CrafterName; }
        set { SetCrafterName(value); }
      }
      public Builder SetCrafterName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCrafterName = true;
        result.crafterName_ = value;
        return this;
      }
      public Builder ClearCrafterName() {
        PrepareBuilder();
        result.hasCrafterName = false;
        result.crafterName_ = "";
        return this;
      }
      
      public bool HasSerialNumber {
        get { return result.hasSerialNumber; }
      }
      public string SerialNumber {
        get { return result.SerialNumber; }
        set { SetSerialNumber(value); }
      }
      public Builder SetSerialNumber(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSerialNumber = true;
        result.serialNumber_ = value;
        return this;
      }
      public Builder ClearSerialNumber() {
        PrepareBuilder();
        result.hasSerialNumber = false;
        result.serialNumber_ = "";
        return this;
      }
      
      public bool HasMaxCondition {
        get { return result.hasMaxCondition; }
      }
      public int MaxCondition {
        get { return result.MaxCondition; }
        set { SetMaxCondition(value); }
      }
      public Builder SetMaxCondition(int value) {
        PrepareBuilder();
        result.hasMaxCondition = true;
        result.maxCondition_ = value;
        return this;
      }
      public Builder ClearMaxCondition() {
        PrepareBuilder();
        result.hasMaxCondition = false;
        result.maxCondition_ = 0;
        return this;
      }
      
      public bool HasCondition {
        get { return result.hasCondition; }
      }
      public int Condition {
        get { return result.Condition; }
        set { SetCondition(value); }
      }
      public Builder SetCondition(int value) {
        PrepareBuilder();
        result.hasCondition = true;
        result.condition_ = value;
        return this;
      }
      public Builder ClearCondition() {
        PrepareBuilder();
        result.hasCondition = false;
        result.condition_ = 0;
        return this;
      }
      
      public bool HasContainmentLocation {
        get { return result.hasContainmentLocation; }
      }
      [global::System.CLSCompliant(false)]
      public uint ContainmentLocation {
        get { return result.ContainmentLocation; }
        set { SetContainmentLocation(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetContainmentLocation(uint value) {
        PrepareBuilder();
        result.hasContainmentLocation = true;
        result.containmentLocation_ = value;
        return this;
      }
      public Builder ClearContainmentLocation() {
        PrepareBuilder();
        result.hasContainmentLocation = false;
        result.containmentLocation_ = 0;
        return this;
      }
      
      public bool HasTemplateFileName {
        get { return result.hasTemplateFileName; }
      }
      public string TemplateFileName {
        get { return result.TemplateFileName; }
        set { SetTemplateFileName(value); }
      }
      public Builder SetTemplateFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTemplateFileName = true;
        result.templateFileName_ = value;
        return this;
      }
      public Builder ClearTemplateFileName() {
        PrepareBuilder();
        result.hasTemplateFileName = false;
        result.templateFileName_ = "";
        return this;
      }
      
      public bool HasPortalsFileName {
        get { return result.hasPortalsFileName; }
      }
      public string PortalsFileName {
        get { return result.PortalsFileName; }
        set { SetPortalsFileName(value); }
      }
      public Builder SetPortalsFileName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPortalsFileName = true;
        result.portalsFileName_ = value;
        return this;
      }
      public Builder ClearPortalsFileName() {
        PrepareBuilder();
        result.hasPortalsFileName = false;
        result.portalsFileName_ = "";
        return this;
      }
      
      public bool HasArmorDetails {
       get { return result.hasArmorDetails; }
      }
      public global::swgemurpcserver.rpc.ArmorItem ArmorDetails {
        get { return result.ArmorDetails; }
        set { SetArmorDetails(value); }
      }
      public Builder SetArmorDetails(global::swgemurpcserver.rpc.ArmorItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasArmorDetails = true;
        result.armorDetails_ = value;
        return this;
      }
      public Builder SetArmorDetails(global::swgemurpcserver.rpc.ArmorItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasArmorDetails = true;
        result.armorDetails_ = builderForValue.Build();
        return this;
      }
      public Builder MergeArmorDetails(global::swgemurpcserver.rpc.ArmorItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasArmorDetails &&
            result.armorDetails_ != global::swgemurpcserver.rpc.ArmorItem.DefaultInstance) {
            result.armorDetails_ = global::swgemurpcserver.rpc.ArmorItem.CreateBuilder(result.armorDetails_).MergeFrom(value).BuildPartial();
        } else {
          result.armorDetails_ = value;
        }
        result.hasArmorDetails = true;
        return this;
      }
      public Builder ClearArmorDetails() {
        PrepareBuilder();
        result.hasArmorDetails = false;
        result.armorDetails_ = null;
        return this;
      }
      
      public bool HasWeaponDetails {
       get { return result.hasWeaponDetails; }
      }
      public global::swgemurpcserver.rpc.WeaponItem WeaponDetails {
        get { return result.WeaponDetails; }
        set { SetWeaponDetails(value); }
      }
      public Builder SetWeaponDetails(global::swgemurpcserver.rpc.WeaponItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWeaponDetails = true;
        result.weaponDetails_ = value;
        return this;
      }
      public Builder SetWeaponDetails(global::swgemurpcserver.rpc.WeaponItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasWeaponDetails = true;
        result.weaponDetails_ = builderForValue.Build();
        return this;
      }
      public Builder MergeWeaponDetails(global::swgemurpcserver.rpc.WeaponItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasWeaponDetails &&
            result.weaponDetails_ != global::swgemurpcserver.rpc.WeaponItem.DefaultInstance) {
            result.weaponDetails_ = global::swgemurpcserver.rpc.WeaponItem.CreateBuilder(result.weaponDetails_).MergeFrom(value).BuildPartial();
        } else {
          result.weaponDetails_ = value;
        }
        result.hasWeaponDetails = true;
        return this;
      }
      public Builder ClearWeaponDetails() {
        PrepareBuilder();
        result.hasWeaponDetails = false;
        result.weaponDetails_ = null;
        return this;
      }
      
      public bool HasResourceDetails {
       get { return result.hasResourceDetails; }
      }
      public global::swgemurpcserver.rpc.ResourceContainerItem ResourceDetails {
        get { return result.ResourceDetails; }
        set { SetResourceDetails(value); }
      }
      public Builder SetResourceDetails(global::swgemurpcserver.rpc.ResourceContainerItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResourceDetails = true;
        result.resourceDetails_ = value;
        return this;
      }
      public Builder SetResourceDetails(global::swgemurpcserver.rpc.ResourceContainerItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasResourceDetails = true;
        result.resourceDetails_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResourceDetails(global::swgemurpcserver.rpc.ResourceContainerItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasResourceDetails &&
            result.resourceDetails_ != global::swgemurpcserver.rpc.ResourceContainerItem.DefaultInstance) {
            result.resourceDetails_ = global::swgemurpcserver.rpc.ResourceContainerItem.CreateBuilder(result.resourceDetails_).MergeFrom(value).BuildPartial();
        } else {
          result.resourceDetails_ = value;
        }
        result.hasResourceDetails = true;
        return this;
      }
      public Builder ClearResourceDetails() {
        PrepareBuilder();
        result.hasResourceDetails = false;
        result.resourceDetails_ = null;
        return this;
      }
      
      public bool HasFactoryCrateDetails {
       get { return result.hasFactoryCrateDetails; }
      }
      public global::swgemurpcserver.rpc.FactoryCrateItem FactoryCrateDetails {
        get { return result.FactoryCrateDetails; }
        set { SetFactoryCrateDetails(value); }
      }
      public Builder SetFactoryCrateDetails(global::swgemurpcserver.rpc.FactoryCrateItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFactoryCrateDetails = true;
        result.factoryCrateDetails_ = value;
        return this;
      }
      public Builder SetFactoryCrateDetails(global::swgemurpcserver.rpc.FactoryCrateItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFactoryCrateDetails = true;
        result.factoryCrateDetails_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFactoryCrateDetails(global::swgemurpcserver.rpc.FactoryCrateItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFactoryCrateDetails &&
            result.factoryCrateDetails_ != global::swgemurpcserver.rpc.FactoryCrateItem.DefaultInstance) {
            result.factoryCrateDetails_ = global::swgemurpcserver.rpc.FactoryCrateItem.CreateBuilder(result.factoryCrateDetails_).MergeFrom(value).BuildPartial();
        } else {
          result.factoryCrateDetails_ = value;
        }
        result.hasFactoryCrateDetails = true;
        return this;
      }
      public Builder ClearFactoryCrateDetails() {
        PrepareBuilder();
        result.hasFactoryCrateDetails = false;
        result.factoryCrateDetails_ = null;
        return this;
      }
      
      public bool HasPharmaceuticalDetails {
       get { return result.hasPharmaceuticalDetails; }
      }
      public global::swgemurpcserver.rpc.PharmaceuticalItem PharmaceuticalDetails {
        get { return result.PharmaceuticalDetails; }
        set { SetPharmaceuticalDetails(value); }
      }
      public Builder SetPharmaceuticalDetails(global::swgemurpcserver.rpc.PharmaceuticalItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPharmaceuticalDetails = true;
        result.pharmaceuticalDetails_ = value;
        return this;
      }
      public Builder SetPharmaceuticalDetails(global::swgemurpcserver.rpc.PharmaceuticalItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPharmaceuticalDetails = true;
        result.pharmaceuticalDetails_ = builderForValue.Build();
        return this;
      }
      public Builder MergePharmaceuticalDetails(global::swgemurpcserver.rpc.PharmaceuticalItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPharmaceuticalDetails &&
            result.pharmaceuticalDetails_ != global::swgemurpcserver.rpc.PharmaceuticalItem.DefaultInstance) {
            result.pharmaceuticalDetails_ = global::swgemurpcserver.rpc.PharmaceuticalItem.CreateBuilder(result.pharmaceuticalDetails_).MergeFrom(value).BuildPartial();
        } else {
          result.pharmaceuticalDetails_ = value;
        }
        result.hasPharmaceuticalDetails = true;
        return this;
      }
      public Builder ClearPharmaceuticalDetails() {
        PrepareBuilder();
        result.hasPharmaceuticalDetails = false;
        result.pharmaceuticalDetails_ = null;
        return this;
      }
      
      public bool HasCraftingComponentDetails {
       get { return result.hasCraftingComponentDetails; }
      }
      public global::swgemurpcserver.rpc.CraftingComponentItem CraftingComponentDetails {
        get { return result.CraftingComponentDetails; }
        set { SetCraftingComponentDetails(value); }
      }
      public Builder SetCraftingComponentDetails(global::swgemurpcserver.rpc.CraftingComponentItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCraftingComponentDetails = true;
        result.craftingComponentDetails_ = value;
        return this;
      }
      public Builder SetCraftingComponentDetails(global::swgemurpcserver.rpc.CraftingComponentItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCraftingComponentDetails = true;
        result.craftingComponentDetails_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCraftingComponentDetails(global::swgemurpcserver.rpc.CraftingComponentItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCraftingComponentDetails &&
            result.craftingComponentDetails_ != global::swgemurpcserver.rpc.CraftingComponentItem.DefaultInstance) {
            result.craftingComponentDetails_ = global::swgemurpcserver.rpc.CraftingComponentItem.CreateBuilder(result.craftingComponentDetails_).MergeFrom(value).BuildPartial();
        } else {
          result.craftingComponentDetails_ = value;
        }
        result.hasCraftingComponentDetails = true;
        return this;
      }
      public Builder ClearCraftingComponentDetails() {
        PrepareBuilder();
        result.hasCraftingComponentDetails = false;
        result.craftingComponentDetails_ = null;
        return this;
      }
      
      public bool HasMfgSchemDetails {
       get { return result.hasMfgSchemDetails; }
      }
      public global::swgemurpcserver.rpc.ManufacturingSchematicItem MfgSchemDetails {
        get { return result.MfgSchemDetails; }
        set { SetMfgSchemDetails(value); }
      }
      public Builder SetMfgSchemDetails(global::swgemurpcserver.rpc.ManufacturingSchematicItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMfgSchemDetails = true;
        result.mfgSchemDetails_ = value;
        return this;
      }
      public Builder SetMfgSchemDetails(global::swgemurpcserver.rpc.ManufacturingSchematicItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMfgSchemDetails = true;
        result.mfgSchemDetails_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMfgSchemDetails(global::swgemurpcserver.rpc.ManufacturingSchematicItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMfgSchemDetails &&
            result.mfgSchemDetails_ != global::swgemurpcserver.rpc.ManufacturingSchematicItem.DefaultInstance) {
            result.mfgSchemDetails_ = global::swgemurpcserver.rpc.ManufacturingSchematicItem.CreateBuilder(result.mfgSchemDetails_).MergeFrom(value).BuildPartial();
        } else {
          result.mfgSchemDetails_ = value;
        }
        result.hasMfgSchemDetails = true;
        return this;
      }
      public Builder ClearMfgSchemDetails() {
        PrepareBuilder();
        result.hasMfgSchemDetails = false;
        result.mfgSchemDetails_ = null;
        return this;
      }
    }
    static CharacterInventoryItem() {
      object.ReferenceEquals(global::swgemurpcserver.rpc.InventoryItem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ArmorItem : pb::GeneratedMessage<ArmorItem, ArmorItem.Builder> {
    private ArmorItem() { }
    private static readonly ArmorItem defaultInstance = new ArmorItem().MakeReadOnly();
    private static readonly string[] _armorItemFieldNames = new string[] { "acid", "action_encumberance", "blast", "cold", "electricity", "energy", "health_encumberance", "heat", "hit_location", "kinetic", "lighsaber", "mind_encumberance", "rating", "stun" };
    private static readonly uint[] _armorItemFieldTags = new uint[] { 69, 88, 45, 61, 29, 21, 80, 53, 114, 13, 77, 96, 104, 37 };
    public static ArmorItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ArmorItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ArmorItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_ArmorItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ArmorItem, ArmorItem.Builder> InternalFieldAccessors {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_ArmorItem__FieldAccessorTable; }
    }
    
    public const int KineticFieldNumber = 1;
    private bool hasKinetic;
    private float kinetic_;
    public bool HasKinetic {
      get { return hasKinetic; }
    }
    public float Kinetic {
      get { return kinetic_; }
    }
    
    public const int EnergyFieldNumber = 2;
    private bool hasEnergy;
    private float energy_;
    public bool HasEnergy {
      get { return hasEnergy; }
    }
    public float Energy {
      get { return energy_; }
    }
    
    public const int ElectricityFieldNumber = 3;
    private bool hasElectricity;
    private float electricity_;
    public bool HasElectricity {
      get { return hasElectricity; }
    }
    public float Electricity {
      get { return electricity_; }
    }
    
    public const int StunFieldNumber = 4;
    private bool hasStun;
    private float stun_;
    public bool HasStun {
      get { return hasStun; }
    }
    public float Stun {
      get { return stun_; }
    }
    
    public const int BlastFieldNumber = 5;
    private bool hasBlast;
    private float blast_;
    public bool HasBlast {
      get { return hasBlast; }
    }
    public float Blast {
      get { return blast_; }
    }
    
    public const int HeatFieldNumber = 6;
    private bool hasHeat;
    private float heat_;
    public bool HasHeat {
      get { return hasHeat; }
    }
    public float Heat {
      get { return heat_; }
    }
    
    public const int ColdFieldNumber = 7;
    private bool hasCold;
    private float cold_;
    public bool HasCold {
      get { return hasCold; }
    }
    public float Cold {
      get { return cold_; }
    }
    
    public const int AcidFieldNumber = 8;
    private bool hasAcid;
    private float acid_;
    public bool HasAcid {
      get { return hasAcid; }
    }
    public float Acid {
      get { return acid_; }
    }
    
    public const int LighsaberFieldNumber = 9;
    private bool hasLighsaber;
    private float lighsaber_;
    public bool HasLighsaber {
      get { return hasLighsaber; }
    }
    public float Lighsaber {
      get { return lighsaber_; }
    }
    
    public const int HealthEncumberanceFieldNumber = 10;
    private bool hasHealthEncumberance;
    private int healthEncumberance_;
    public bool HasHealthEncumberance {
      get { return hasHealthEncumberance; }
    }
    public int HealthEncumberance {
      get { return healthEncumberance_; }
    }
    
    public const int ActionEncumberanceFieldNumber = 11;
    private bool hasActionEncumberance;
    private int actionEncumberance_;
    public bool HasActionEncumberance {
      get { return hasActionEncumberance; }
    }
    public int ActionEncumberance {
      get { return actionEncumberance_; }
    }
    
    public const int MindEncumberanceFieldNumber = 12;
    private bool hasMindEncumberance;
    private int mindEncumberance_;
    public bool HasMindEncumberance {
      get { return hasMindEncumberance; }
    }
    public int MindEncumberance {
      get { return mindEncumberance_; }
    }
    
    public const int RatingFieldNumber = 13;
    private bool hasRating;
    private int rating_;
    public bool HasRating {
      get { return hasRating; }
    }
    public int Rating {
      get { return rating_; }
    }
    
    public const int HitLocationFieldNumber = 14;
    private int hitLocationMemoizedSerializedSize;
    private pbc::PopsicleList<int> hitLocation_ = new pbc::PopsicleList<int>();
    public scg::IList<int> HitLocationList {
      get { return pbc::Lists.AsReadOnly(hitLocation_); }
    }
    public int HitLocationCount {
      get { return hitLocation_.Count; }
    }
    public int GetHitLocation(int index) {
      return hitLocation_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasKinetic) return false;
        if (!hasEnergy) return false;
        if (!hasElectricity) return false;
        if (!hasStun) return false;
        if (!hasBlast) return false;
        if (!hasHeat) return false;
        if (!hasCold) return false;
        if (!hasAcid) return false;
        if (!hasLighsaber) return false;
        if (!hasHealthEncumberance) return false;
        if (!hasActionEncumberance) return false;
        if (!hasMindEncumberance) return false;
        if (!hasRating) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _armorItemFieldNames;
      if (hasKinetic) {
        output.WriteFloat(1, field_names[9], Kinetic);
      }
      if (hasEnergy) {
        output.WriteFloat(2, field_names[5], Energy);
      }
      if (hasElectricity) {
        output.WriteFloat(3, field_names[4], Electricity);
      }
      if (hasStun) {
        output.WriteFloat(4, field_names[13], Stun);
      }
      if (hasBlast) {
        output.WriteFloat(5, field_names[2], Blast);
      }
      if (hasHeat) {
        output.WriteFloat(6, field_names[7], Heat);
      }
      if (hasCold) {
        output.WriteFloat(7, field_names[3], Cold);
      }
      if (hasAcid) {
        output.WriteFloat(8, field_names[0], Acid);
      }
      if (hasLighsaber) {
        output.WriteFloat(9, field_names[10], Lighsaber);
      }
      if (hasHealthEncumberance) {
        output.WriteInt32(10, field_names[6], HealthEncumberance);
      }
      if (hasActionEncumberance) {
        output.WriteInt32(11, field_names[1], ActionEncumberance);
      }
      if (hasMindEncumberance) {
        output.WriteInt32(12, field_names[11], MindEncumberance);
      }
      if (hasRating) {
        output.WriteInt32(13, field_names[12], Rating);
      }
      if (hitLocation_.Count > 0) {
        output.WritePackedInt32Array(14, field_names[8], hitLocationMemoizedSerializedSize, hitLocation_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasKinetic) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, Kinetic);
        }
        if (hasEnergy) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, Energy);
        }
        if (hasElectricity) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, Electricity);
        }
        if (hasStun) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, Stun);
        }
        if (hasBlast) {
          size += pb::CodedOutputStream.ComputeFloatSize(5, Blast);
        }
        if (hasHeat) {
          size += pb::CodedOutputStream.ComputeFloatSize(6, Heat);
        }
        if (hasCold) {
          size += pb::CodedOutputStream.ComputeFloatSize(7, Cold);
        }
        if (hasAcid) {
          size += pb::CodedOutputStream.ComputeFloatSize(8, Acid);
        }
        if (hasLighsaber) {
          size += pb::CodedOutputStream.ComputeFloatSize(9, Lighsaber);
        }
        if (hasHealthEncumberance) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, HealthEncumberance);
        }
        if (hasActionEncumberance) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, ActionEncumberance);
        }
        if (hasMindEncumberance) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, MindEncumberance);
        }
        if (hasRating) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, Rating);
        }
        {
          int dataSize = 0;
          foreach (int element in HitLocationList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          if (hitLocation_.Count != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
          }
          hitLocationMemoizedSerializedSize = dataSize;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ArmorItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ArmorItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ArmorItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ArmorItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ArmorItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ArmorItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ArmorItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ArmorItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ArmorItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ArmorItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ArmorItem MakeReadOnly() {
      hitLocation_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ArmorItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ArmorItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ArmorItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ArmorItem result;
      
      private ArmorItem PrepareBuilder() {
        if (resultIsReadOnly) {
          ArmorItem original = result;
          result = new ArmorItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ArmorItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::swgemurpcserver.rpc.ArmorItem.Descriptor; }
      }
      
      public override ArmorItem DefaultInstanceForType {
        get { return global::swgemurpcserver.rpc.ArmorItem.DefaultInstance; }
      }
      
      public override ArmorItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ArmorItem) {
          return MergeFrom((ArmorItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ArmorItem other) {
        if (other == global::swgemurpcserver.rpc.ArmorItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasKinetic) {
          Kinetic = other.Kinetic;
        }
        if (other.HasEnergy) {
          Energy = other.Energy;
        }
        if (other.HasElectricity) {
          Electricity = other.Electricity;
        }
        if (other.HasStun) {
          Stun = other.Stun;
        }
        if (other.HasBlast) {
          Blast = other.Blast;
        }
        if (other.HasHeat) {
          Heat = other.Heat;
        }
        if (other.HasCold) {
          Cold = other.Cold;
        }
        if (other.HasAcid) {
          Acid = other.Acid;
        }
        if (other.HasLighsaber) {
          Lighsaber = other.Lighsaber;
        }
        if (other.HasHealthEncumberance) {
          HealthEncumberance = other.HealthEncumberance;
        }
        if (other.HasActionEncumberance) {
          ActionEncumberance = other.ActionEncumberance;
        }
        if (other.HasMindEncumberance) {
          MindEncumberance = other.MindEncumberance;
        }
        if (other.HasRating) {
          Rating = other.Rating;
        }
        if (other.hitLocation_.Count != 0) {
          result.hitLocation_.Add(other.hitLocation_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_armorItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _armorItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasKinetic = input.ReadFloat(ref result.kinetic_);
              break;
            }
            case 21: {
              result.hasEnergy = input.ReadFloat(ref result.energy_);
              break;
            }
            case 29: {
              result.hasElectricity = input.ReadFloat(ref result.electricity_);
              break;
            }
            case 37: {
              result.hasStun = input.ReadFloat(ref result.stun_);
              break;
            }
            case 45: {
              result.hasBlast = input.ReadFloat(ref result.blast_);
              break;
            }
            case 53: {
              result.hasHeat = input.ReadFloat(ref result.heat_);
              break;
            }
            case 61: {
              result.hasCold = input.ReadFloat(ref result.cold_);
              break;
            }
            case 69: {
              result.hasAcid = input.ReadFloat(ref result.acid_);
              break;
            }
            case 77: {
              result.hasLighsaber = input.ReadFloat(ref result.lighsaber_);
              break;
            }
            case 80: {
              result.hasHealthEncumberance = input.ReadInt32(ref result.healthEncumberance_);
              break;
            }
            case 88: {
              result.hasActionEncumberance = input.ReadInt32(ref result.actionEncumberance_);
              break;
            }
            case 96: {
              result.hasMindEncumberance = input.ReadInt32(ref result.mindEncumberance_);
              break;
            }
            case 104: {
              result.hasRating = input.ReadInt32(ref result.rating_);
              break;
            }
            case 114:
            case 112: {
              input.ReadInt32Array(tag, field_name, result.hitLocation_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasKinetic {
        get { return result.hasKinetic; }
      }
      public float Kinetic {
        get { return result.Kinetic; }
        set { SetKinetic(value); }
      }
      public Builder SetKinetic(float value) {
        PrepareBuilder();
        result.hasKinetic = true;
        result.kinetic_ = value;
        return this;
      }
      public Builder ClearKinetic() {
        PrepareBuilder();
        result.hasKinetic = false;
        result.kinetic_ = 0F;
        return this;
      }
      
      public bool HasEnergy {
        get { return result.hasEnergy; }
      }
      public float Energy {
        get { return result.Energy; }
        set { SetEnergy(value); }
      }
      public Builder SetEnergy(float value) {
        PrepareBuilder();
        result.hasEnergy = true;
        result.energy_ = value;
        return this;
      }
      public Builder ClearEnergy() {
        PrepareBuilder();
        result.hasEnergy = false;
        result.energy_ = 0F;
        return this;
      }
      
      public bool HasElectricity {
        get { return result.hasElectricity; }
      }
      public float Electricity {
        get { return result.Electricity; }
        set { SetElectricity(value); }
      }
      public Builder SetElectricity(float value) {
        PrepareBuilder();
        result.hasElectricity = true;
        result.electricity_ = value;
        return this;
      }
      public Builder ClearElectricity() {
        PrepareBuilder();
        result.hasElectricity = false;
        result.electricity_ = 0F;
        return this;
      }
      
      public bool HasStun {
        get { return result.hasStun; }
      }
      public float Stun {
        get { return result.Stun; }
        set { SetStun(value); }
      }
      public Builder SetStun(float value) {
        PrepareBuilder();
        result.hasStun = true;
        result.stun_ = value;
        return this;
      }
      public Builder ClearStun() {
        PrepareBuilder();
        result.hasStun = false;
        result.stun_ = 0F;
        return this;
      }
      
      public bool HasBlast {
        get { return result.hasBlast; }
      }
      public float Blast {
        get { return result.Blast; }
        set { SetBlast(value); }
      }
      public Builder SetBlast(float value) {
        PrepareBuilder();
        result.hasBlast = true;
        result.blast_ = value;
        return this;
      }
      public Builder ClearBlast() {
        PrepareBuilder();
        result.hasBlast = false;
        result.blast_ = 0F;
        return this;
      }
      
      public bool HasHeat {
        get { return result.hasHeat; }
      }
      public float Heat {
        get { return result.Heat; }
        set { SetHeat(value); }
      }
      public Builder SetHeat(float value) {
        PrepareBuilder();
        result.hasHeat = true;
        result.heat_ = value;
        return this;
      }
      public Builder ClearHeat() {
        PrepareBuilder();
        result.hasHeat = false;
        result.heat_ = 0F;
        return this;
      }
      
      public bool HasCold {
        get { return result.hasCold; }
      }
      public float Cold {
        get { return result.Cold; }
        set { SetCold(value); }
      }
      public Builder SetCold(float value) {
        PrepareBuilder();
        result.hasCold = true;
        result.cold_ = value;
        return this;
      }
      public Builder ClearCold() {
        PrepareBuilder();
        result.hasCold = false;
        result.cold_ = 0F;
        return this;
      }
      
      public bool HasAcid {
        get { return result.hasAcid; }
      }
      public float Acid {
        get { return result.Acid; }
        set { SetAcid(value); }
      }
      public Builder SetAcid(float value) {
        PrepareBuilder();
        result.hasAcid = true;
        result.acid_ = value;
        return this;
      }
      public Builder ClearAcid() {
        PrepareBuilder();
        result.hasAcid = false;
        result.acid_ = 0F;
        return this;
      }
      
      public bool HasLighsaber {
        get { return result.hasLighsaber; }
      }
      public float Lighsaber {
        get { return result.Lighsaber; }
        set { SetLighsaber(value); }
      }
      public Builder SetLighsaber(float value) {
        PrepareBuilder();
        result.hasLighsaber = true;
        result.lighsaber_ = value;
        return this;
      }
      public Builder ClearLighsaber() {
        PrepareBuilder();
        result.hasLighsaber = false;
        result.lighsaber_ = 0F;
        return this;
      }
      
      public bool HasHealthEncumberance {
        get { return result.hasHealthEncumberance; }
      }
      public int HealthEncumberance {
        get { return result.HealthEncumberance; }
        set { SetHealthEncumberance(value); }
      }
      public Builder SetHealthEncumberance(int value) {
        PrepareBuilder();
        result.hasHealthEncumberance = true;
        result.healthEncumberance_ = value;
        return this;
      }
      public Builder ClearHealthEncumberance() {
        PrepareBuilder();
        result.hasHealthEncumberance = false;
        result.healthEncumberance_ = 0;
        return this;
      }
      
      public bool HasActionEncumberance {
        get { return result.hasActionEncumberance; }
      }
      public int ActionEncumberance {
        get { return result.ActionEncumberance; }
        set { SetActionEncumberance(value); }
      }
      public Builder SetActionEncumberance(int value) {
        PrepareBuilder();
        result.hasActionEncumberance = true;
        result.actionEncumberance_ = value;
        return this;
      }
      public Builder ClearActionEncumberance() {
        PrepareBuilder();
        result.hasActionEncumberance = false;
        result.actionEncumberance_ = 0;
        return this;
      }
      
      public bool HasMindEncumberance {
        get { return result.hasMindEncumberance; }
      }
      public int MindEncumberance {
        get { return result.MindEncumberance; }
        set { SetMindEncumberance(value); }
      }
      public Builder SetMindEncumberance(int value) {
        PrepareBuilder();
        result.hasMindEncumberance = true;
        result.mindEncumberance_ = value;
        return this;
      }
      public Builder ClearMindEncumberance() {
        PrepareBuilder();
        result.hasMindEncumberance = false;
        result.mindEncumberance_ = 0;
        return this;
      }
      
      public bool HasRating {
        get { return result.hasRating; }
      }
      public int Rating {
        get { return result.Rating; }
        set { SetRating(value); }
      }
      public Builder SetRating(int value) {
        PrepareBuilder();
        result.hasRating = true;
        result.rating_ = value;
        return this;
      }
      public Builder ClearRating() {
        PrepareBuilder();
        result.hasRating = false;
        result.rating_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> HitLocationList {
        get { return PrepareBuilder().hitLocation_; }
      }
      public int HitLocationCount {
        get { return result.HitLocationCount; }
      }
      public int GetHitLocation(int index) {
        return result.GetHitLocation(index);
      }
      public Builder SetHitLocation(int index, int value) {
        PrepareBuilder();
        result.hitLocation_[index] = value;
        return this;
      }
      public Builder AddHitLocation(int value) {
        PrepareBuilder();
        result.hitLocation_.Add(value);
        return this;
      }
      public Builder AddRangeHitLocation(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.hitLocation_.Add(values);
        return this;
      }
      public Builder ClearHitLocation() {
        PrepareBuilder();
        result.hitLocation_.Clear();
        return this;
      }
    }
    static ArmorItem() {
      object.ReferenceEquals(global::swgemurpcserver.rpc.InventoryItem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class WeaponItem : pb::GeneratedMessage<WeaponItem, WeaponItem.Builder> {
    private WeaponItem() { }
    private static readonly WeaponItem defaultInstance = new WeaponItem().MakeReadOnly();
    private static readonly string[] _weaponItemFieldNames = new string[] { "action_attack_cost", "armor_piercing", "attack_speed", "damage_radius", "damage_type", "force_attack_cost", "health_attack_cost", "ideal_accuracy", "ideal_range", "max_damage", "max_range", "max_range_accuracy", "min_damage", "mind_attack_cost", "point_blank_accuracy", "point_blank_range", "weapon_type", "wound_ratio" };
    private static readonly uint[] _weaponItemFieldTags = new uint[] { 112, 56, 69, 101, 136, 128, 104, 40, 24, 77, 32, 48, 85, 120, 8, 16, 146, 93 };
    public static WeaponItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override WeaponItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override WeaponItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_WeaponItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<WeaponItem, WeaponItem.Builder> InternalFieldAccessors {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_WeaponItem__FieldAccessorTable; }
    }
    
    public const int PointBlankAccuracyFieldNumber = 1;
    private bool hasPointBlankAccuracy;
    private int pointBlankAccuracy_;
    public bool HasPointBlankAccuracy {
      get { return hasPointBlankAccuracy; }
    }
    public int PointBlankAccuracy {
      get { return pointBlankAccuracy_; }
    }
    
    public const int PointBlankRangeFieldNumber = 2;
    private bool hasPointBlankRange;
    private int pointBlankRange_;
    public bool HasPointBlankRange {
      get { return hasPointBlankRange; }
    }
    public int PointBlankRange {
      get { return pointBlankRange_; }
    }
    
    public const int IdealRangeFieldNumber = 3;
    private bool hasIdealRange;
    private int idealRange_;
    public bool HasIdealRange {
      get { return hasIdealRange; }
    }
    public int IdealRange {
      get { return idealRange_; }
    }
    
    public const int MaxRangeFieldNumber = 4;
    private bool hasMaxRange;
    private int maxRange_;
    public bool HasMaxRange {
      get { return hasMaxRange; }
    }
    public int MaxRange {
      get { return maxRange_; }
    }
    
    public const int IdealAccuracyFieldNumber = 5;
    private bool hasIdealAccuracy;
    private int idealAccuracy_;
    public bool HasIdealAccuracy {
      get { return hasIdealAccuracy; }
    }
    public int IdealAccuracy {
      get { return idealAccuracy_; }
    }
    
    public const int MaxRangeAccuracyFieldNumber = 6;
    private bool hasMaxRangeAccuracy;
    private int maxRangeAccuracy_;
    public bool HasMaxRangeAccuracy {
      get { return hasMaxRangeAccuracy; }
    }
    public int MaxRangeAccuracy {
      get { return maxRangeAccuracy_; }
    }
    
    public const int ArmorPiercingFieldNumber = 7;
    private bool hasArmorPiercing;
    private int armorPiercing_;
    public bool HasArmorPiercing {
      get { return hasArmorPiercing; }
    }
    public int ArmorPiercing {
      get { return armorPiercing_; }
    }
    
    public const int AttackSpeedFieldNumber = 8;
    private bool hasAttackSpeed;
    private float attackSpeed_;
    public bool HasAttackSpeed {
      get { return hasAttackSpeed; }
    }
    public float AttackSpeed {
      get { return attackSpeed_; }
    }
    
    public const int MaxDamageFieldNumber = 9;
    private bool hasMaxDamage;
    private float maxDamage_;
    public bool HasMaxDamage {
      get { return hasMaxDamage; }
    }
    public float MaxDamage {
      get { return maxDamage_; }
    }
    
    public const int MinDamageFieldNumber = 10;
    private bool hasMinDamage;
    private float minDamage_;
    public bool HasMinDamage {
      get { return hasMinDamage; }
    }
    public float MinDamage {
      get { return minDamage_; }
    }
    
    public const int WoundRatioFieldNumber = 11;
    private bool hasWoundRatio;
    private float woundRatio_;
    public bool HasWoundRatio {
      get { return hasWoundRatio; }
    }
    public float WoundRatio {
      get { return woundRatio_; }
    }
    
    public const int DamageRadiusFieldNumber = 12;
    private bool hasDamageRadius;
    private float damageRadius_;
    public bool HasDamageRadius {
      get { return hasDamageRadius; }
    }
    public float DamageRadius {
      get { return damageRadius_; }
    }
    
    public const int HealthAttackCostFieldNumber = 13;
    private bool hasHealthAttackCost;
    private int healthAttackCost_;
    public bool HasHealthAttackCost {
      get { return hasHealthAttackCost; }
    }
    public int HealthAttackCost {
      get { return healthAttackCost_; }
    }
    
    public const int ActionAttackCostFieldNumber = 14;
    private bool hasActionAttackCost;
    private int actionAttackCost_;
    public bool HasActionAttackCost {
      get { return hasActionAttackCost; }
    }
    public int ActionAttackCost {
      get { return actionAttackCost_; }
    }
    
    public const int MindAttackCostFieldNumber = 15;
    private bool hasMindAttackCost;
    private int mindAttackCost_;
    public bool HasMindAttackCost {
      get { return hasMindAttackCost; }
    }
    public int MindAttackCost {
      get { return mindAttackCost_; }
    }
    
    public const int ForceAttackCostFieldNumber = 16;
    private bool hasForceAttackCost;
    private int forceAttackCost_;
    public bool HasForceAttackCost {
      get { return hasForceAttackCost; }
    }
    public int ForceAttackCost {
      get { return forceAttackCost_; }
    }
    
    public const int DamageTypeFieldNumber = 17;
    private bool hasDamageType;
    private int damageType_;
    public bool HasDamageType {
      get { return hasDamageType; }
    }
    public int DamageType {
      get { return damageType_; }
    }
    
    public const int WeaponTypeFieldNumber = 18;
    private bool hasWeaponType;
    private string weaponType_ = "";
    public bool HasWeaponType {
      get { return hasWeaponType; }
    }
    public string WeaponType {
      get { return weaponType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPointBlankAccuracy) return false;
        if (!hasPointBlankRange) return false;
        if (!hasIdealRange) return false;
        if (!hasMaxRange) return false;
        if (!hasIdealAccuracy) return false;
        if (!hasMaxRangeAccuracy) return false;
        if (!hasArmorPiercing) return false;
        if (!hasAttackSpeed) return false;
        if (!hasMaxDamage) return false;
        if (!hasMinDamage) return false;
        if (!hasWoundRatio) return false;
        if (!hasDamageRadius) return false;
        if (!hasHealthAttackCost) return false;
        if (!hasActionAttackCost) return false;
        if (!hasMindAttackCost) return false;
        if (!hasForceAttackCost) return false;
        if (!hasDamageType) return false;
        if (!hasWeaponType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _weaponItemFieldNames;
      if (hasPointBlankAccuracy) {
        output.WriteInt32(1, field_names[14], PointBlankAccuracy);
      }
      if (hasPointBlankRange) {
        output.WriteInt32(2, field_names[15], PointBlankRange);
      }
      if (hasIdealRange) {
        output.WriteInt32(3, field_names[8], IdealRange);
      }
      if (hasMaxRange) {
        output.WriteInt32(4, field_names[10], MaxRange);
      }
      if (hasIdealAccuracy) {
        output.WriteInt32(5, field_names[7], IdealAccuracy);
      }
      if (hasMaxRangeAccuracy) {
        output.WriteInt32(6, field_names[11], MaxRangeAccuracy);
      }
      if (hasArmorPiercing) {
        output.WriteInt32(7, field_names[1], ArmorPiercing);
      }
      if (hasAttackSpeed) {
        output.WriteFloat(8, field_names[2], AttackSpeed);
      }
      if (hasMaxDamage) {
        output.WriteFloat(9, field_names[9], MaxDamage);
      }
      if (hasMinDamage) {
        output.WriteFloat(10, field_names[12], MinDamage);
      }
      if (hasWoundRatio) {
        output.WriteFloat(11, field_names[17], WoundRatio);
      }
      if (hasDamageRadius) {
        output.WriteFloat(12, field_names[3], DamageRadius);
      }
      if (hasHealthAttackCost) {
        output.WriteInt32(13, field_names[6], HealthAttackCost);
      }
      if (hasActionAttackCost) {
        output.WriteInt32(14, field_names[0], ActionAttackCost);
      }
      if (hasMindAttackCost) {
        output.WriteInt32(15, field_names[13], MindAttackCost);
      }
      if (hasForceAttackCost) {
        output.WriteInt32(16, field_names[5], ForceAttackCost);
      }
      if (hasDamageType) {
        output.WriteInt32(17, field_names[4], DamageType);
      }
      if (hasWeaponType) {
        output.WriteString(18, field_names[16], WeaponType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPointBlankAccuracy) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, PointBlankAccuracy);
        }
        if (hasPointBlankRange) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, PointBlankRange);
        }
        if (hasIdealRange) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, IdealRange);
        }
        if (hasMaxRange) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, MaxRange);
        }
        if (hasIdealAccuracy) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, IdealAccuracy);
        }
        if (hasMaxRangeAccuracy) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, MaxRangeAccuracy);
        }
        if (hasArmorPiercing) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, ArmorPiercing);
        }
        if (hasAttackSpeed) {
          size += pb::CodedOutputStream.ComputeFloatSize(8, AttackSpeed);
        }
        if (hasMaxDamage) {
          size += pb::CodedOutputStream.ComputeFloatSize(9, MaxDamage);
        }
        if (hasMinDamage) {
          size += pb::CodedOutputStream.ComputeFloatSize(10, MinDamage);
        }
        if (hasWoundRatio) {
          size += pb::CodedOutputStream.ComputeFloatSize(11, WoundRatio);
        }
        if (hasDamageRadius) {
          size += pb::CodedOutputStream.ComputeFloatSize(12, DamageRadius);
        }
        if (hasHealthAttackCost) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, HealthAttackCost);
        }
        if (hasActionAttackCost) {
          size += pb::CodedOutputStream.ComputeInt32Size(14, ActionAttackCost);
        }
        if (hasMindAttackCost) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, MindAttackCost);
        }
        if (hasForceAttackCost) {
          size += pb::CodedOutputStream.ComputeInt32Size(16, ForceAttackCost);
        }
        if (hasDamageType) {
          size += pb::CodedOutputStream.ComputeInt32Size(17, DamageType);
        }
        if (hasWeaponType) {
          size += pb::CodedOutputStream.ComputeStringSize(18, WeaponType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static WeaponItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WeaponItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WeaponItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WeaponItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WeaponItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WeaponItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static WeaponItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static WeaponItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static WeaponItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WeaponItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private WeaponItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(WeaponItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<WeaponItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(WeaponItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private WeaponItem result;
      
      private WeaponItem PrepareBuilder() {
        if (resultIsReadOnly) {
          WeaponItem original = result;
          result = new WeaponItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override WeaponItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::swgemurpcserver.rpc.WeaponItem.Descriptor; }
      }
      
      public override WeaponItem DefaultInstanceForType {
        get { return global::swgemurpcserver.rpc.WeaponItem.DefaultInstance; }
      }
      
      public override WeaponItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is WeaponItem) {
          return MergeFrom((WeaponItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(WeaponItem other) {
        if (other == global::swgemurpcserver.rpc.WeaponItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPointBlankAccuracy) {
          PointBlankAccuracy = other.PointBlankAccuracy;
        }
        if (other.HasPointBlankRange) {
          PointBlankRange = other.PointBlankRange;
        }
        if (other.HasIdealRange) {
          IdealRange = other.IdealRange;
        }
        if (other.HasMaxRange) {
          MaxRange = other.MaxRange;
        }
        if (other.HasIdealAccuracy) {
          IdealAccuracy = other.IdealAccuracy;
        }
        if (other.HasMaxRangeAccuracy) {
          MaxRangeAccuracy = other.MaxRangeAccuracy;
        }
        if (other.HasArmorPiercing) {
          ArmorPiercing = other.ArmorPiercing;
        }
        if (other.HasAttackSpeed) {
          AttackSpeed = other.AttackSpeed;
        }
        if (other.HasMaxDamage) {
          MaxDamage = other.MaxDamage;
        }
        if (other.HasMinDamage) {
          MinDamage = other.MinDamage;
        }
        if (other.HasWoundRatio) {
          WoundRatio = other.WoundRatio;
        }
        if (other.HasDamageRadius) {
          DamageRadius = other.DamageRadius;
        }
        if (other.HasHealthAttackCost) {
          HealthAttackCost = other.HealthAttackCost;
        }
        if (other.HasActionAttackCost) {
          ActionAttackCost = other.ActionAttackCost;
        }
        if (other.HasMindAttackCost) {
          MindAttackCost = other.MindAttackCost;
        }
        if (other.HasForceAttackCost) {
          ForceAttackCost = other.ForceAttackCost;
        }
        if (other.HasDamageType) {
          DamageType = other.DamageType;
        }
        if (other.HasWeaponType) {
          WeaponType = other.WeaponType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_weaponItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _weaponItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPointBlankAccuracy = input.ReadInt32(ref result.pointBlankAccuracy_);
              break;
            }
            case 16: {
              result.hasPointBlankRange = input.ReadInt32(ref result.pointBlankRange_);
              break;
            }
            case 24: {
              result.hasIdealRange = input.ReadInt32(ref result.idealRange_);
              break;
            }
            case 32: {
              result.hasMaxRange = input.ReadInt32(ref result.maxRange_);
              break;
            }
            case 40: {
              result.hasIdealAccuracy = input.ReadInt32(ref result.idealAccuracy_);
              break;
            }
            case 48: {
              result.hasMaxRangeAccuracy = input.ReadInt32(ref result.maxRangeAccuracy_);
              break;
            }
            case 56: {
              result.hasArmorPiercing = input.ReadInt32(ref result.armorPiercing_);
              break;
            }
            case 69: {
              result.hasAttackSpeed = input.ReadFloat(ref result.attackSpeed_);
              break;
            }
            case 77: {
              result.hasMaxDamage = input.ReadFloat(ref result.maxDamage_);
              break;
            }
            case 85: {
              result.hasMinDamage = input.ReadFloat(ref result.minDamage_);
              break;
            }
            case 93: {
              result.hasWoundRatio = input.ReadFloat(ref result.woundRatio_);
              break;
            }
            case 101: {
              result.hasDamageRadius = input.ReadFloat(ref result.damageRadius_);
              break;
            }
            case 104: {
              result.hasHealthAttackCost = input.ReadInt32(ref result.healthAttackCost_);
              break;
            }
            case 112: {
              result.hasActionAttackCost = input.ReadInt32(ref result.actionAttackCost_);
              break;
            }
            case 120: {
              result.hasMindAttackCost = input.ReadInt32(ref result.mindAttackCost_);
              break;
            }
            case 128: {
              result.hasForceAttackCost = input.ReadInt32(ref result.forceAttackCost_);
              break;
            }
            case 136: {
              result.hasDamageType = input.ReadInt32(ref result.damageType_);
              break;
            }
            case 146: {
              result.hasWeaponType = input.ReadString(ref result.weaponType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPointBlankAccuracy {
        get { return result.hasPointBlankAccuracy; }
      }
      public int PointBlankAccuracy {
        get { return result.PointBlankAccuracy; }
        set { SetPointBlankAccuracy(value); }
      }
      public Builder SetPointBlankAccuracy(int value) {
        PrepareBuilder();
        result.hasPointBlankAccuracy = true;
        result.pointBlankAccuracy_ = value;
        return this;
      }
      public Builder ClearPointBlankAccuracy() {
        PrepareBuilder();
        result.hasPointBlankAccuracy = false;
        result.pointBlankAccuracy_ = 0;
        return this;
      }
      
      public bool HasPointBlankRange {
        get { return result.hasPointBlankRange; }
      }
      public int PointBlankRange {
        get { return result.PointBlankRange; }
        set { SetPointBlankRange(value); }
      }
      public Builder SetPointBlankRange(int value) {
        PrepareBuilder();
        result.hasPointBlankRange = true;
        result.pointBlankRange_ = value;
        return this;
      }
      public Builder ClearPointBlankRange() {
        PrepareBuilder();
        result.hasPointBlankRange = false;
        result.pointBlankRange_ = 0;
        return this;
      }
      
      public bool HasIdealRange {
        get { return result.hasIdealRange; }
      }
      public int IdealRange {
        get { return result.IdealRange; }
        set { SetIdealRange(value); }
      }
      public Builder SetIdealRange(int value) {
        PrepareBuilder();
        result.hasIdealRange = true;
        result.idealRange_ = value;
        return this;
      }
      public Builder ClearIdealRange() {
        PrepareBuilder();
        result.hasIdealRange = false;
        result.idealRange_ = 0;
        return this;
      }
      
      public bool HasMaxRange {
        get { return result.hasMaxRange; }
      }
      public int MaxRange {
        get { return result.MaxRange; }
        set { SetMaxRange(value); }
      }
      public Builder SetMaxRange(int value) {
        PrepareBuilder();
        result.hasMaxRange = true;
        result.maxRange_ = value;
        return this;
      }
      public Builder ClearMaxRange() {
        PrepareBuilder();
        result.hasMaxRange = false;
        result.maxRange_ = 0;
        return this;
      }
      
      public bool HasIdealAccuracy {
        get { return result.hasIdealAccuracy; }
      }
      public int IdealAccuracy {
        get { return result.IdealAccuracy; }
        set { SetIdealAccuracy(value); }
      }
      public Builder SetIdealAccuracy(int value) {
        PrepareBuilder();
        result.hasIdealAccuracy = true;
        result.idealAccuracy_ = value;
        return this;
      }
      public Builder ClearIdealAccuracy() {
        PrepareBuilder();
        result.hasIdealAccuracy = false;
        result.idealAccuracy_ = 0;
        return this;
      }
      
      public bool HasMaxRangeAccuracy {
        get { return result.hasMaxRangeAccuracy; }
      }
      public int MaxRangeAccuracy {
        get { return result.MaxRangeAccuracy; }
        set { SetMaxRangeAccuracy(value); }
      }
      public Builder SetMaxRangeAccuracy(int value) {
        PrepareBuilder();
        result.hasMaxRangeAccuracy = true;
        result.maxRangeAccuracy_ = value;
        return this;
      }
      public Builder ClearMaxRangeAccuracy() {
        PrepareBuilder();
        result.hasMaxRangeAccuracy = false;
        result.maxRangeAccuracy_ = 0;
        return this;
      }
      
      public bool HasArmorPiercing {
        get { return result.hasArmorPiercing; }
      }
      public int ArmorPiercing {
        get { return result.ArmorPiercing; }
        set { SetArmorPiercing(value); }
      }
      public Builder SetArmorPiercing(int value) {
        PrepareBuilder();
        result.hasArmorPiercing = true;
        result.armorPiercing_ = value;
        return this;
      }
      public Builder ClearArmorPiercing() {
        PrepareBuilder();
        result.hasArmorPiercing = false;
        result.armorPiercing_ = 0;
        return this;
      }
      
      public bool HasAttackSpeed {
        get { return result.hasAttackSpeed; }
      }
      public float AttackSpeed {
        get { return result.AttackSpeed; }
        set { SetAttackSpeed(value); }
      }
      public Builder SetAttackSpeed(float value) {
        PrepareBuilder();
        result.hasAttackSpeed = true;
        result.attackSpeed_ = value;
        return this;
      }
      public Builder ClearAttackSpeed() {
        PrepareBuilder();
        result.hasAttackSpeed = false;
        result.attackSpeed_ = 0F;
        return this;
      }
      
      public bool HasMaxDamage {
        get { return result.hasMaxDamage; }
      }
      public float MaxDamage {
        get { return result.MaxDamage; }
        set { SetMaxDamage(value); }
      }
      public Builder SetMaxDamage(float value) {
        PrepareBuilder();
        result.hasMaxDamage = true;
        result.maxDamage_ = value;
        return this;
      }
      public Builder ClearMaxDamage() {
        PrepareBuilder();
        result.hasMaxDamage = false;
        result.maxDamage_ = 0F;
        return this;
      }
      
      public bool HasMinDamage {
        get { return result.hasMinDamage; }
      }
      public float MinDamage {
        get { return result.MinDamage; }
        set { SetMinDamage(value); }
      }
      public Builder SetMinDamage(float value) {
        PrepareBuilder();
        result.hasMinDamage = true;
        result.minDamage_ = value;
        return this;
      }
      public Builder ClearMinDamage() {
        PrepareBuilder();
        result.hasMinDamage = false;
        result.minDamage_ = 0F;
        return this;
      }
      
      public bool HasWoundRatio {
        get { return result.hasWoundRatio; }
      }
      public float WoundRatio {
        get { return result.WoundRatio; }
        set { SetWoundRatio(value); }
      }
      public Builder SetWoundRatio(float value) {
        PrepareBuilder();
        result.hasWoundRatio = true;
        result.woundRatio_ = value;
        return this;
      }
      public Builder ClearWoundRatio() {
        PrepareBuilder();
        result.hasWoundRatio = false;
        result.woundRatio_ = 0F;
        return this;
      }
      
      public bool HasDamageRadius {
        get { return result.hasDamageRadius; }
      }
      public float DamageRadius {
        get { return result.DamageRadius; }
        set { SetDamageRadius(value); }
      }
      public Builder SetDamageRadius(float value) {
        PrepareBuilder();
        result.hasDamageRadius = true;
        result.damageRadius_ = value;
        return this;
      }
      public Builder ClearDamageRadius() {
        PrepareBuilder();
        result.hasDamageRadius = false;
        result.damageRadius_ = 0F;
        return this;
      }
      
      public bool HasHealthAttackCost {
        get { return result.hasHealthAttackCost; }
      }
      public int HealthAttackCost {
        get { return result.HealthAttackCost; }
        set { SetHealthAttackCost(value); }
      }
      public Builder SetHealthAttackCost(int value) {
        PrepareBuilder();
        result.hasHealthAttackCost = true;
        result.healthAttackCost_ = value;
        return this;
      }
      public Builder ClearHealthAttackCost() {
        PrepareBuilder();
        result.hasHealthAttackCost = false;
        result.healthAttackCost_ = 0;
        return this;
      }
      
      public bool HasActionAttackCost {
        get { return result.hasActionAttackCost; }
      }
      public int ActionAttackCost {
        get { return result.ActionAttackCost; }
        set { SetActionAttackCost(value); }
      }
      public Builder SetActionAttackCost(int value) {
        PrepareBuilder();
        result.hasActionAttackCost = true;
        result.actionAttackCost_ = value;
        return this;
      }
      public Builder ClearActionAttackCost() {
        PrepareBuilder();
        result.hasActionAttackCost = false;
        result.actionAttackCost_ = 0;
        return this;
      }
      
      public bool HasMindAttackCost {
        get { return result.hasMindAttackCost; }
      }
      public int MindAttackCost {
        get { return result.MindAttackCost; }
        set { SetMindAttackCost(value); }
      }
      public Builder SetMindAttackCost(int value) {
        PrepareBuilder();
        result.hasMindAttackCost = true;
        result.mindAttackCost_ = value;
        return this;
      }
      public Builder ClearMindAttackCost() {
        PrepareBuilder();
        result.hasMindAttackCost = false;
        result.mindAttackCost_ = 0;
        return this;
      }
      
      public bool HasForceAttackCost {
        get { return result.hasForceAttackCost; }
      }
      public int ForceAttackCost {
        get { return result.ForceAttackCost; }
        set { SetForceAttackCost(value); }
      }
      public Builder SetForceAttackCost(int value) {
        PrepareBuilder();
        result.hasForceAttackCost = true;
        result.forceAttackCost_ = value;
        return this;
      }
      public Builder ClearForceAttackCost() {
        PrepareBuilder();
        result.hasForceAttackCost = false;
        result.forceAttackCost_ = 0;
        return this;
      }
      
      public bool HasDamageType {
        get { return result.hasDamageType; }
      }
      public int DamageType {
        get { return result.DamageType; }
        set { SetDamageType(value); }
      }
      public Builder SetDamageType(int value) {
        PrepareBuilder();
        result.hasDamageType = true;
        result.damageType_ = value;
        return this;
      }
      public Builder ClearDamageType() {
        PrepareBuilder();
        result.hasDamageType = false;
        result.damageType_ = 0;
        return this;
      }
      
      public bool HasWeaponType {
        get { return result.hasWeaponType; }
      }
      public string WeaponType {
        get { return result.WeaponType; }
        set { SetWeaponType(value); }
      }
      public Builder SetWeaponType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWeaponType = true;
        result.weaponType_ = value;
        return this;
      }
      public Builder ClearWeaponType() {
        PrepareBuilder();
        result.hasWeaponType = false;
        result.weaponType_ = "";
        return this;
      }
    }
    static WeaponItem() {
      object.ReferenceEquals(global::swgemurpcserver.rpc.InventoryItem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ResourceContainerItem : pb::GeneratedMessage<ResourceContainerItem, ResourceContainerItem.Builder> {
    private ResourceContainerItem() { }
    private static readonly ResourceContainerItem defaultInstance = new ResourceContainerItem().MakeReadOnly();
    private static readonly string[] _resourceContainerItemFieldNames = new string[] { "attributes", "classes", "count", "name", "resource_id", "type" };
    private static readonly uint[] _resourceContainerItemFieldTags = new uint[] { 50, 42, 32, 10, 25, 18 };
    public static ResourceContainerItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ResourceContainerItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ResourceContainerItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_ResourceContainerItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ResourceContainerItem, ResourceContainerItem.Builder> InternalFieldAccessors {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_ResourceContainerItem__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private string type_ = "";
    public bool HasType {
      get { return hasType; }
    }
    public string Type {
      get { return type_; }
    }
    
    public const int ResourceIdFieldNumber = 3;
    private bool hasResourceId;
    private ulong resourceId_;
    public bool HasResourceId {
      get { return hasResourceId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ResourceId {
      get { return resourceId_; }
    }
    
    public const int CountFieldNumber = 4;
    private bool hasCount;
    private int count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public int Count {
      get { return count_; }
    }
    
    public const int ClassesFieldNumber = 5;
    private pbc::PopsicleList<global::swgemurpcserver.rpc.ResourceSpawnClass> classes_ = new pbc::PopsicleList<global::swgemurpcserver.rpc.ResourceSpawnClass>();
    public scg::IList<global::swgemurpcserver.rpc.ResourceSpawnClass> ClassesList {
      get { return classes_; }
    }
    public int ClassesCount {
      get { return classes_.Count; }
    }
    public global::swgemurpcserver.rpc.ResourceSpawnClass GetClasses(int index) {
      return classes_[index];
    }
    
    public const int AttributesFieldNumber = 6;
    private pbc::PopsicleList<global::swgemurpcserver.rpc.ResourceAttribute> attributes_ = new pbc::PopsicleList<global::swgemurpcserver.rpc.ResourceAttribute>();
    public scg::IList<global::swgemurpcserver.rpc.ResourceAttribute> AttributesList {
      get { return attributes_; }
    }
    public int AttributesCount {
      get { return attributes_.Count; }
    }
    public global::swgemurpcserver.rpc.ResourceAttribute GetAttributes(int index) {
      return attributes_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasType) return false;
        if (!hasResourceId) return false;
        if (!hasCount) return false;
        foreach (global::swgemurpcserver.rpc.ResourceSpawnClass element in ClassesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::swgemurpcserver.rpc.ResourceAttribute element in AttributesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _resourceContainerItemFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[3], Name);
      }
      if (hasType) {
        output.WriteString(2, field_names[5], Type);
      }
      if (hasResourceId) {
        output.WriteFixed64(3, field_names[4], ResourceId);
      }
      if (hasCount) {
        output.WriteInt32(4, field_names[2], Count);
      }
      if (classes_.Count > 0) {
        output.WriteMessageArray(5, field_names[1], classes_);
      }
      if (attributes_.Count > 0) {
        output.WriteMessageArray(6, field_names[0], attributes_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Type);
        }
        if (hasResourceId) {
          size += pb::CodedOutputStream.ComputeFixed64Size(3, ResourceId);
        }
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Count);
        }
        foreach (global::swgemurpcserver.rpc.ResourceSpawnClass element in ClassesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, element);
        }
        foreach (global::swgemurpcserver.rpc.ResourceAttribute element in AttributesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ResourceContainerItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ResourceContainerItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ResourceContainerItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ResourceContainerItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ResourceContainerItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ResourceContainerItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ResourceContainerItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ResourceContainerItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ResourceContainerItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ResourceContainerItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ResourceContainerItem MakeReadOnly() {
      classes_.MakeReadOnly();
      attributes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ResourceContainerItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ResourceContainerItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ResourceContainerItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ResourceContainerItem result;
      
      private ResourceContainerItem PrepareBuilder() {
        if (resultIsReadOnly) {
          ResourceContainerItem original = result;
          result = new ResourceContainerItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ResourceContainerItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::swgemurpcserver.rpc.ResourceContainerItem.Descriptor; }
      }
      
      public override ResourceContainerItem DefaultInstanceForType {
        get { return global::swgemurpcserver.rpc.ResourceContainerItem.DefaultInstance; }
      }
      
      public override ResourceContainerItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ResourceContainerItem) {
          return MergeFrom((ResourceContainerItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ResourceContainerItem other) {
        if (other == global::swgemurpcserver.rpc.ResourceContainerItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasResourceId) {
          ResourceId = other.ResourceId;
        }
        if (other.HasCount) {
          Count = other.Count;
        }
        if (other.classes_.Count != 0) {
          result.classes_.Add(other.classes_);
        }
        if (other.attributes_.Count != 0) {
          result.attributes_.Add(other.attributes_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_resourceContainerItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _resourceContainerItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 18: {
              result.hasType = input.ReadString(ref result.type_);
              break;
            }
            case 25: {
              result.hasResourceId = input.ReadFixed64(ref result.resourceId_);
              break;
            }
            case 32: {
              result.hasCount = input.ReadInt32(ref result.count_);
              break;
            }
            case 42: {
              input.ReadMessageArray(tag, field_name, result.classes_, global::swgemurpcserver.rpc.ResourceSpawnClass.DefaultInstance, extensionRegistry);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.attributes_, global::swgemurpcserver.rpc.ResourceAttribute.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public string Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = "";
        return this;
      }
      
      public bool HasResourceId {
        get { return result.hasResourceId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong ResourceId {
        get { return result.ResourceId; }
        set { SetResourceId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetResourceId(ulong value) {
        PrepareBuilder();
        result.hasResourceId = true;
        result.resourceId_ = value;
        return this;
      }
      public Builder ClearResourceId() {
        PrepareBuilder();
        result.hasResourceId = false;
        result.resourceId_ = 0;
        return this;
      }
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public int Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(int value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::swgemurpcserver.rpc.ResourceSpawnClass> ClassesList {
        get { return PrepareBuilder().classes_; }
      }
      public int ClassesCount {
        get { return result.ClassesCount; }
      }
      public global::swgemurpcserver.rpc.ResourceSpawnClass GetClasses(int index) {
        return result.GetClasses(index);
      }
      public Builder SetClasses(int index, global::swgemurpcserver.rpc.ResourceSpawnClass value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.classes_[index] = value;
        return this;
      }
      public Builder SetClasses(int index, global::swgemurpcserver.rpc.ResourceSpawnClass.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.classes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddClasses(global::swgemurpcserver.rpc.ResourceSpawnClass value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.classes_.Add(value);
        return this;
      }
      public Builder AddClasses(global::swgemurpcserver.rpc.ResourceSpawnClass.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.classes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeClasses(scg::IEnumerable<global::swgemurpcserver.rpc.ResourceSpawnClass> values) {
        PrepareBuilder();
        result.classes_.Add(values);
        return this;
      }
      public Builder ClearClasses() {
        PrepareBuilder();
        result.classes_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::swgemurpcserver.rpc.ResourceAttribute> AttributesList {
        get { return PrepareBuilder().attributes_; }
      }
      public int AttributesCount {
        get { return result.AttributesCount; }
      }
      public global::swgemurpcserver.rpc.ResourceAttribute GetAttributes(int index) {
        return result.GetAttributes(index);
      }
      public Builder SetAttributes(int index, global::swgemurpcserver.rpc.ResourceAttribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_[index] = value;
        return this;
      }
      public Builder SetAttributes(int index, global::swgemurpcserver.rpc.ResourceAttribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttributes(global::swgemurpcserver.rpc.ResourceAttribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_.Add(value);
        return this;
      }
      public Builder AddAttributes(global::swgemurpcserver.rpc.ResourceAttribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttributes(scg::IEnumerable<global::swgemurpcserver.rpc.ResourceAttribute> values) {
        PrepareBuilder();
        result.attributes_.Add(values);
        return this;
      }
      public Builder ClearAttributes() {
        PrepareBuilder();
        result.attributes_.Clear();
        return this;
      }
    }
    static ResourceContainerItem() {
      object.ReferenceEquals(global::swgemurpcserver.rpc.InventoryItem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ResourceAttribute : pb::GeneratedMessage<ResourceAttribute, ResourceAttribute.Builder> {
    private ResourceAttribute() { }
    private static readonly ResourceAttribute defaultInstance = new ResourceAttribute().MakeReadOnly();
    private static readonly string[] _resourceAttributeFieldNames = new string[] { "name", "value" };
    private static readonly uint[] _resourceAttributeFieldTags = new uint[] { 10, 16 };
    public static ResourceAttribute DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ResourceAttribute DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ResourceAttribute ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_ResourceAttribute__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ResourceAttribute, ResourceAttribute.Builder> InternalFieldAccessors {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_ResourceAttribute__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int ValueFieldNumber = 2;
    private bool hasValue;
    private int value_;
    public bool HasValue {
      get { return hasValue; }
    }
    public int Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _resourceAttributeFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[0], Name);
      }
      if (hasValue) {
        output.WriteInt32(2, field_names[1], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ResourceAttribute ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ResourceAttribute ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ResourceAttribute ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ResourceAttribute ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ResourceAttribute ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ResourceAttribute ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ResourceAttribute ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ResourceAttribute ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ResourceAttribute ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ResourceAttribute ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ResourceAttribute MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ResourceAttribute prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ResourceAttribute, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ResourceAttribute cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ResourceAttribute result;
      
      private ResourceAttribute PrepareBuilder() {
        if (resultIsReadOnly) {
          ResourceAttribute original = result;
          result = new ResourceAttribute();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ResourceAttribute MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::swgemurpcserver.rpc.ResourceAttribute.Descriptor; }
      }
      
      public override ResourceAttribute DefaultInstanceForType {
        get { return global::swgemurpcserver.rpc.ResourceAttribute.DefaultInstance; }
      }
      
      public override ResourceAttribute BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ResourceAttribute) {
          return MergeFrom((ResourceAttribute) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ResourceAttribute other) {
        if (other == global::swgemurpcserver.rpc.ResourceAttribute.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_resourceAttributeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _resourceAttributeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 16: {
              result.hasValue = input.ReadInt32(ref result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public int Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(int value) {
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = 0;
        return this;
      }
    }
    static ResourceAttribute() {
      object.ReferenceEquals(global::swgemurpcserver.rpc.InventoryItem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ResourceSpawnClass : pb::GeneratedMessage<ResourceSpawnClass, ResourceSpawnClass.Builder> {
    private ResourceSpawnClass() { }
    private static readonly ResourceSpawnClass defaultInstance = new ResourceSpawnClass().MakeReadOnly();
    private static readonly string[] _resourceSpawnClassFieldNames = new string[] { "class_name", "stf_class" };
    private static readonly uint[] _resourceSpawnClassFieldTags = new uint[] { 10, 18 };
    public static ResourceSpawnClass DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ResourceSpawnClass DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ResourceSpawnClass ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_ResourceSpawnClass__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ResourceSpawnClass, ResourceSpawnClass.Builder> InternalFieldAccessors {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_ResourceSpawnClass__FieldAccessorTable; }
    }
    
    public const int ClassNameFieldNumber = 1;
    private bool hasClassName;
    private string className_ = "";
    public bool HasClassName {
      get { return hasClassName; }
    }
    public string ClassName {
      get { return className_; }
    }
    
    public const int StfClassFieldNumber = 2;
    private bool hasStfClass;
    private string stfClass_ = "";
    public bool HasStfClass {
      get { return hasStfClass; }
    }
    public string StfClass {
      get { return stfClass_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasClassName) return false;
        if (!hasStfClass) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _resourceSpawnClassFieldNames;
      if (hasClassName) {
        output.WriteString(1, field_names[0], ClassName);
      }
      if (hasStfClass) {
        output.WriteString(2, field_names[1], StfClass);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasClassName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, ClassName);
        }
        if (hasStfClass) {
          size += pb::CodedOutputStream.ComputeStringSize(2, StfClass);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ResourceSpawnClass ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ResourceSpawnClass ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ResourceSpawnClass ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ResourceSpawnClass ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ResourceSpawnClass ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ResourceSpawnClass ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ResourceSpawnClass ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ResourceSpawnClass ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ResourceSpawnClass ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ResourceSpawnClass ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ResourceSpawnClass MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ResourceSpawnClass prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ResourceSpawnClass, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ResourceSpawnClass cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ResourceSpawnClass result;
      
      private ResourceSpawnClass PrepareBuilder() {
        if (resultIsReadOnly) {
          ResourceSpawnClass original = result;
          result = new ResourceSpawnClass();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ResourceSpawnClass MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::swgemurpcserver.rpc.ResourceSpawnClass.Descriptor; }
      }
      
      public override ResourceSpawnClass DefaultInstanceForType {
        get { return global::swgemurpcserver.rpc.ResourceSpawnClass.DefaultInstance; }
      }
      
      public override ResourceSpawnClass BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ResourceSpawnClass) {
          return MergeFrom((ResourceSpawnClass) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ResourceSpawnClass other) {
        if (other == global::swgemurpcserver.rpc.ResourceSpawnClass.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasClassName) {
          ClassName = other.ClassName;
        }
        if (other.HasStfClass) {
          StfClass = other.StfClass;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_resourceSpawnClassFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _resourceSpawnClassFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasClassName = input.ReadString(ref result.className_);
              break;
            }
            case 18: {
              result.hasStfClass = input.ReadString(ref result.stfClass_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasClassName {
        get { return result.hasClassName; }
      }
      public string ClassName {
        get { return result.ClassName; }
        set { SetClassName(value); }
      }
      public Builder SetClassName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClassName = true;
        result.className_ = value;
        return this;
      }
      public Builder ClearClassName() {
        PrepareBuilder();
        result.hasClassName = false;
        result.className_ = "";
        return this;
      }
      
      public bool HasStfClass {
        get { return result.hasStfClass; }
      }
      public string StfClass {
        get { return result.StfClass; }
        set { SetStfClass(value); }
      }
      public Builder SetStfClass(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStfClass = true;
        result.stfClass_ = value;
        return this;
      }
      public Builder ClearStfClass() {
        PrepareBuilder();
        result.hasStfClass = false;
        result.stfClass_ = "";
        return this;
      }
    }
    static ResourceSpawnClass() {
      object.ReferenceEquals(global::swgemurpcserver.rpc.InventoryItem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FactoryCrateItem : pb::GeneratedMessage<FactoryCrateItem, FactoryCrateItem.Builder> {
    private FactoryCrateItem() { }
    private static readonly FactoryCrateItem defaultInstance = new FactoryCrateItem().MakeReadOnly();
    private static readonly string[] _factoryCrateItemFieldNames = new string[] { "contained_items", "count", "max_items" };
    private static readonly uint[] _factoryCrateItemFieldTags = new uint[] { 26, 8, 16 };
    public static FactoryCrateItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FactoryCrateItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FactoryCrateItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_FactoryCrateItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FactoryCrateItem, FactoryCrateItem.Builder> InternalFieldAccessors {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_FactoryCrateItem__FieldAccessorTable; }
    }
    
    public const int CountFieldNumber = 1;
    private bool hasCount;
    private int count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public int Count {
      get { return count_; }
    }
    
    public const int MaxItemsFieldNumber = 2;
    private bool hasMaxItems;
    private int maxItems_;
    public bool HasMaxItems {
      get { return hasMaxItems; }
    }
    public int MaxItems {
      get { return maxItems_; }
    }
    
    public const int ContainedItemsFieldNumber = 3;
    private bool hasContainedItems;
    private global::swgemurpcserver.rpc.CharacterInventoryItem containedItems_;
    public bool HasContainedItems {
      get { return hasContainedItems; }
    }
    public global::swgemurpcserver.rpc.CharacterInventoryItem ContainedItems {
      get { return containedItems_ ?? global::swgemurpcserver.rpc.CharacterInventoryItem.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCount) return false;
        if (!hasMaxItems) return false;
        if (!hasContainedItems) return false;
        if (!ContainedItems.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _factoryCrateItemFieldNames;
      if (hasCount) {
        output.WriteInt32(1, field_names[1], Count);
      }
      if (hasMaxItems) {
        output.WriteInt32(2, field_names[2], MaxItems);
      }
      if (hasContainedItems) {
        output.WriteMessage(3, field_names[0], ContainedItems);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Count);
        }
        if (hasMaxItems) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, MaxItems);
        }
        if (hasContainedItems) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ContainedItems);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FactoryCrateItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FactoryCrateItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FactoryCrateItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FactoryCrateItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FactoryCrateItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FactoryCrateItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FactoryCrateItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FactoryCrateItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FactoryCrateItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FactoryCrateItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FactoryCrateItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FactoryCrateItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FactoryCrateItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FactoryCrateItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FactoryCrateItem result;
      
      private FactoryCrateItem PrepareBuilder() {
        if (resultIsReadOnly) {
          FactoryCrateItem original = result;
          result = new FactoryCrateItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FactoryCrateItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::swgemurpcserver.rpc.FactoryCrateItem.Descriptor; }
      }
      
      public override FactoryCrateItem DefaultInstanceForType {
        get { return global::swgemurpcserver.rpc.FactoryCrateItem.DefaultInstance; }
      }
      
      public override FactoryCrateItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FactoryCrateItem) {
          return MergeFrom((FactoryCrateItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FactoryCrateItem other) {
        if (other == global::swgemurpcserver.rpc.FactoryCrateItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCount) {
          Count = other.Count;
        }
        if (other.HasMaxItems) {
          MaxItems = other.MaxItems;
        }
        if (other.HasContainedItems) {
          MergeContainedItems(other.ContainedItems);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_factoryCrateItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _factoryCrateItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCount = input.ReadInt32(ref result.count_);
              break;
            }
            case 16: {
              result.hasMaxItems = input.ReadInt32(ref result.maxItems_);
              break;
            }
            case 26: {
              global::swgemurpcserver.rpc.CharacterInventoryItem.Builder subBuilder = global::swgemurpcserver.rpc.CharacterInventoryItem.CreateBuilder();
              if (result.hasContainedItems) {
                subBuilder.MergeFrom(ContainedItems);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ContainedItems = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public int Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(int value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
      
      public bool HasMaxItems {
        get { return result.hasMaxItems; }
      }
      public int MaxItems {
        get { return result.MaxItems; }
        set { SetMaxItems(value); }
      }
      public Builder SetMaxItems(int value) {
        PrepareBuilder();
        result.hasMaxItems = true;
        result.maxItems_ = value;
        return this;
      }
      public Builder ClearMaxItems() {
        PrepareBuilder();
        result.hasMaxItems = false;
        result.maxItems_ = 0;
        return this;
      }
      
      public bool HasContainedItems {
       get { return result.hasContainedItems; }
      }
      public global::swgemurpcserver.rpc.CharacterInventoryItem ContainedItems {
        get { return result.ContainedItems; }
        set { SetContainedItems(value); }
      }
      public Builder SetContainedItems(global::swgemurpcserver.rpc.CharacterInventoryItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContainedItems = true;
        result.containedItems_ = value;
        return this;
      }
      public Builder SetContainedItems(global::swgemurpcserver.rpc.CharacterInventoryItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasContainedItems = true;
        result.containedItems_ = builderForValue.Build();
        return this;
      }
      public Builder MergeContainedItems(global::swgemurpcserver.rpc.CharacterInventoryItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasContainedItems &&
            result.containedItems_ != global::swgemurpcserver.rpc.CharacterInventoryItem.DefaultInstance) {
            result.containedItems_ = global::swgemurpcserver.rpc.CharacterInventoryItem.CreateBuilder(result.containedItems_).MergeFrom(value).BuildPartial();
        } else {
          result.containedItems_ = value;
        }
        result.hasContainedItems = true;
        return this;
      }
      public Builder ClearContainedItems() {
        PrepareBuilder();
        result.hasContainedItems = false;
        result.containedItems_ = null;
        return this;
      }
    }
    static FactoryCrateItem() {
      object.ReferenceEquals(global::swgemurpcserver.rpc.InventoryItem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PharmaceuticalItem : pb::GeneratedMessage<PharmaceuticalItem, PharmaceuticalItem.Builder> {
    private PharmaceuticalItem() { }
    private static readonly PharmaceuticalItem defaultInstance = new PharmaceuticalItem().MakeReadOnly();
    private static readonly string[] _pharmaceuticalItemFieldNames = new string[] { "area", "dot_pack_details", "effectiveness", "enhance_pack_details", "medicine_required", "pharma_type", "ranged_stim_details", "revivie_pack_details", "use_count", "wound_pack_details" };
    private static readonly uint[] _pharmaceuticalItemFieldTags = new uint[] { 29, 58, 21, 66, 32, 8, 50, 74, 40, 82 };
    public static PharmaceuticalItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PharmaceuticalItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PharmaceuticalItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_PharmaceuticalItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PharmaceuticalItem, PharmaceuticalItem.Builder> InternalFieldAccessors {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_PharmaceuticalItem__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum PharmaceuticalItemType {
        UNKNOWN = -1,
        CUREPACK = 0,
        DOTPACK = 1,
        ENHANCEPACK = 2,
        RANGEDSTIMPACK = 3,
        REVIVIEPACK = 4,
        STIMPACK = 5,
        WOUNDPACK = 6,
      }
      
    }
    #endregion
    
    public const int PharmaTypeFieldNumber = 1;
    private bool hasPharmaType;
    private global::swgemurpcserver.rpc.PharmaceuticalItem.Types.PharmaceuticalItemType pharmaType_ = global::swgemurpcserver.rpc.PharmaceuticalItem.Types.PharmaceuticalItemType.UNKNOWN;
    public bool HasPharmaType {
      get { return hasPharmaType; }
    }
    public global::swgemurpcserver.rpc.PharmaceuticalItem.Types.PharmaceuticalItemType PharmaType {
      get { return pharmaType_; }
    }
    
    public const int EffectivenessFieldNumber = 2;
    private bool hasEffectiveness;
    private float effectiveness_;
    public bool HasEffectiveness {
      get { return hasEffectiveness; }
    }
    public float Effectiveness {
      get { return effectiveness_; }
    }
    
    public const int AreaFieldNumber = 3;
    private bool hasArea;
    private float area_;
    public bool HasArea {
      get { return hasArea; }
    }
    public float Area {
      get { return area_; }
    }
    
    public const int MedicineRequiredFieldNumber = 4;
    private bool hasMedicineRequired;
    private int medicineRequired_;
    public bool HasMedicineRequired {
      get { return hasMedicineRequired; }
    }
    public int MedicineRequired {
      get { return medicineRequired_; }
    }
    
    public const int UseCountFieldNumber = 5;
    private bool hasUseCount;
    private int useCount_;
    public bool HasUseCount {
      get { return hasUseCount; }
    }
    public int UseCount {
      get { return useCount_; }
    }
    
    public const int RangedStimDetailsFieldNumber = 6;
    private bool hasRangedStimDetails;
    private global::swgemurpcserver.rpc.RangedStimPackItem rangedStimDetails_;
    public bool HasRangedStimDetails {
      get { return hasRangedStimDetails; }
    }
    public global::swgemurpcserver.rpc.RangedStimPackItem RangedStimDetails {
      get { return rangedStimDetails_ ?? global::swgemurpcserver.rpc.RangedStimPackItem.DefaultInstance; }
    }
    
    public const int DotPackDetailsFieldNumber = 7;
    private bool hasDotPackDetails;
    private global::swgemurpcserver.rpc.DotPackItem dotPackDetails_;
    public bool HasDotPackDetails {
      get { return hasDotPackDetails; }
    }
    public global::swgemurpcserver.rpc.DotPackItem DotPackDetails {
      get { return dotPackDetails_ ?? global::swgemurpcserver.rpc.DotPackItem.DefaultInstance; }
    }
    
    public const int EnhancePackDetailsFieldNumber = 8;
    private bool hasEnhancePackDetails;
    private global::swgemurpcserver.rpc.EnhancePackItem enhancePackDetails_;
    public bool HasEnhancePackDetails {
      get { return hasEnhancePackDetails; }
    }
    public global::swgemurpcserver.rpc.EnhancePackItem EnhancePackDetails {
      get { return enhancePackDetails_ ?? global::swgemurpcserver.rpc.EnhancePackItem.DefaultInstance; }
    }
    
    public const int ReviviePackDetailsFieldNumber = 9;
    private bool hasReviviePackDetails;
    private global::swgemurpcserver.rpc.RevivePackItem reviviePackDetails_;
    public bool HasReviviePackDetails {
      get { return hasReviviePackDetails; }
    }
    public global::swgemurpcserver.rpc.RevivePackItem ReviviePackDetails {
      get { return reviviePackDetails_ ?? global::swgemurpcserver.rpc.RevivePackItem.DefaultInstance; }
    }
    
    public const int WoundPackDetailsFieldNumber = 10;
    private bool hasWoundPackDetails;
    private global::swgemurpcserver.rpc.WoundPackItem woundPackDetails_;
    public bool HasWoundPackDetails {
      get { return hasWoundPackDetails; }
    }
    public global::swgemurpcserver.rpc.WoundPackItem WoundPackDetails {
      get { return woundPackDetails_ ?? global::swgemurpcserver.rpc.WoundPackItem.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPharmaType) return false;
        if (!hasEffectiveness) return false;
        if (!hasArea) return false;
        if (!hasMedicineRequired) return false;
        if (!hasUseCount) return false;
        if (HasRangedStimDetails) {
          if (!RangedStimDetails.IsInitialized) return false;
        }
        if (HasDotPackDetails) {
          if (!DotPackDetails.IsInitialized) return false;
        }
        if (HasEnhancePackDetails) {
          if (!EnhancePackDetails.IsInitialized) return false;
        }
        if (HasReviviePackDetails) {
          if (!ReviviePackDetails.IsInitialized) return false;
        }
        if (HasWoundPackDetails) {
          if (!WoundPackDetails.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _pharmaceuticalItemFieldNames;
      if (hasPharmaType) {
        output.WriteEnum(1, field_names[5], (int) PharmaType, PharmaType);
      }
      if (hasEffectiveness) {
        output.WriteFloat(2, field_names[2], Effectiveness);
      }
      if (hasArea) {
        output.WriteFloat(3, field_names[0], Area);
      }
      if (hasMedicineRequired) {
        output.WriteInt32(4, field_names[4], MedicineRequired);
      }
      if (hasUseCount) {
        output.WriteInt32(5, field_names[8], UseCount);
      }
      if (hasRangedStimDetails) {
        output.WriteMessage(6, field_names[6], RangedStimDetails);
      }
      if (hasDotPackDetails) {
        output.WriteMessage(7, field_names[1], DotPackDetails);
      }
      if (hasEnhancePackDetails) {
        output.WriteMessage(8, field_names[3], EnhancePackDetails);
      }
      if (hasReviviePackDetails) {
        output.WriteMessage(9, field_names[7], ReviviePackDetails);
      }
      if (hasWoundPackDetails) {
        output.WriteMessage(10, field_names[9], WoundPackDetails);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPharmaType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) PharmaType);
        }
        if (hasEffectiveness) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, Effectiveness);
        }
        if (hasArea) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, Area);
        }
        if (hasMedicineRequired) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, MedicineRequired);
        }
        if (hasUseCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, UseCount);
        }
        if (hasRangedStimDetails) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, RangedStimDetails);
        }
        if (hasDotPackDetails) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, DotPackDetails);
        }
        if (hasEnhancePackDetails) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, EnhancePackDetails);
        }
        if (hasReviviePackDetails) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, ReviviePackDetails);
        }
        if (hasWoundPackDetails) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, WoundPackDetails);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PharmaceuticalItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PharmaceuticalItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PharmaceuticalItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PharmaceuticalItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PharmaceuticalItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PharmaceuticalItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PharmaceuticalItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PharmaceuticalItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PharmaceuticalItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PharmaceuticalItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PharmaceuticalItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PharmaceuticalItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PharmaceuticalItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PharmaceuticalItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PharmaceuticalItem result;
      
      private PharmaceuticalItem PrepareBuilder() {
        if (resultIsReadOnly) {
          PharmaceuticalItem original = result;
          result = new PharmaceuticalItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PharmaceuticalItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::swgemurpcserver.rpc.PharmaceuticalItem.Descriptor; }
      }
      
      public override PharmaceuticalItem DefaultInstanceForType {
        get { return global::swgemurpcserver.rpc.PharmaceuticalItem.DefaultInstance; }
      }
      
      public override PharmaceuticalItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PharmaceuticalItem) {
          return MergeFrom((PharmaceuticalItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PharmaceuticalItem other) {
        if (other == global::swgemurpcserver.rpc.PharmaceuticalItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPharmaType) {
          PharmaType = other.PharmaType;
        }
        if (other.HasEffectiveness) {
          Effectiveness = other.Effectiveness;
        }
        if (other.HasArea) {
          Area = other.Area;
        }
        if (other.HasMedicineRequired) {
          MedicineRequired = other.MedicineRequired;
        }
        if (other.HasUseCount) {
          UseCount = other.UseCount;
        }
        if (other.HasRangedStimDetails) {
          MergeRangedStimDetails(other.RangedStimDetails);
        }
        if (other.HasDotPackDetails) {
          MergeDotPackDetails(other.DotPackDetails);
        }
        if (other.HasEnhancePackDetails) {
          MergeEnhancePackDetails(other.EnhancePackDetails);
        }
        if (other.HasReviviePackDetails) {
          MergeReviviePackDetails(other.ReviviePackDetails);
        }
        if (other.HasWoundPackDetails) {
          MergeWoundPackDetails(other.WoundPackDetails);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_pharmaceuticalItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _pharmaceuticalItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.pharmaType_, out unknown)) {
                result.hasPharmaType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 21: {
              result.hasEffectiveness = input.ReadFloat(ref result.effectiveness_);
              break;
            }
            case 29: {
              result.hasArea = input.ReadFloat(ref result.area_);
              break;
            }
            case 32: {
              result.hasMedicineRequired = input.ReadInt32(ref result.medicineRequired_);
              break;
            }
            case 40: {
              result.hasUseCount = input.ReadInt32(ref result.useCount_);
              break;
            }
            case 50: {
              global::swgemurpcserver.rpc.RangedStimPackItem.Builder subBuilder = global::swgemurpcserver.rpc.RangedStimPackItem.CreateBuilder();
              if (result.hasRangedStimDetails) {
                subBuilder.MergeFrom(RangedStimDetails);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RangedStimDetails = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::swgemurpcserver.rpc.DotPackItem.Builder subBuilder = global::swgemurpcserver.rpc.DotPackItem.CreateBuilder();
              if (result.hasDotPackDetails) {
                subBuilder.MergeFrom(DotPackDetails);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DotPackDetails = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::swgemurpcserver.rpc.EnhancePackItem.Builder subBuilder = global::swgemurpcserver.rpc.EnhancePackItem.CreateBuilder();
              if (result.hasEnhancePackDetails) {
                subBuilder.MergeFrom(EnhancePackDetails);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              EnhancePackDetails = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::swgemurpcserver.rpc.RevivePackItem.Builder subBuilder = global::swgemurpcserver.rpc.RevivePackItem.CreateBuilder();
              if (result.hasReviviePackDetails) {
                subBuilder.MergeFrom(ReviviePackDetails);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ReviviePackDetails = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::swgemurpcserver.rpc.WoundPackItem.Builder subBuilder = global::swgemurpcserver.rpc.WoundPackItem.CreateBuilder();
              if (result.hasWoundPackDetails) {
                subBuilder.MergeFrom(WoundPackDetails);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              WoundPackDetails = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPharmaType {
       get { return result.hasPharmaType; }
      }
      public global::swgemurpcserver.rpc.PharmaceuticalItem.Types.PharmaceuticalItemType PharmaType {
        get { return result.PharmaType; }
        set { SetPharmaType(value); }
      }
      public Builder SetPharmaType(global::swgemurpcserver.rpc.PharmaceuticalItem.Types.PharmaceuticalItemType value) {
        PrepareBuilder();
        result.hasPharmaType = true;
        result.pharmaType_ = value;
        return this;
      }
      public Builder ClearPharmaType() {
        PrepareBuilder();
        result.hasPharmaType = false;
        result.pharmaType_ = global::swgemurpcserver.rpc.PharmaceuticalItem.Types.PharmaceuticalItemType.UNKNOWN;
        return this;
      }
      
      public bool HasEffectiveness {
        get { return result.hasEffectiveness; }
      }
      public float Effectiveness {
        get { return result.Effectiveness; }
        set { SetEffectiveness(value); }
      }
      public Builder SetEffectiveness(float value) {
        PrepareBuilder();
        result.hasEffectiveness = true;
        result.effectiveness_ = value;
        return this;
      }
      public Builder ClearEffectiveness() {
        PrepareBuilder();
        result.hasEffectiveness = false;
        result.effectiveness_ = 0F;
        return this;
      }
      
      public bool HasArea {
        get { return result.hasArea; }
      }
      public float Area {
        get { return result.Area; }
        set { SetArea(value); }
      }
      public Builder SetArea(float value) {
        PrepareBuilder();
        result.hasArea = true;
        result.area_ = value;
        return this;
      }
      public Builder ClearArea() {
        PrepareBuilder();
        result.hasArea = false;
        result.area_ = 0F;
        return this;
      }
      
      public bool HasMedicineRequired {
        get { return result.hasMedicineRequired; }
      }
      public int MedicineRequired {
        get { return result.MedicineRequired; }
        set { SetMedicineRequired(value); }
      }
      public Builder SetMedicineRequired(int value) {
        PrepareBuilder();
        result.hasMedicineRequired = true;
        result.medicineRequired_ = value;
        return this;
      }
      public Builder ClearMedicineRequired() {
        PrepareBuilder();
        result.hasMedicineRequired = false;
        result.medicineRequired_ = 0;
        return this;
      }
      
      public bool HasUseCount {
        get { return result.hasUseCount; }
      }
      public int UseCount {
        get { return result.UseCount; }
        set { SetUseCount(value); }
      }
      public Builder SetUseCount(int value) {
        PrepareBuilder();
        result.hasUseCount = true;
        result.useCount_ = value;
        return this;
      }
      public Builder ClearUseCount() {
        PrepareBuilder();
        result.hasUseCount = false;
        result.useCount_ = 0;
        return this;
      }
      
      public bool HasRangedStimDetails {
       get { return result.hasRangedStimDetails; }
      }
      public global::swgemurpcserver.rpc.RangedStimPackItem RangedStimDetails {
        get { return result.RangedStimDetails; }
        set { SetRangedStimDetails(value); }
      }
      public Builder SetRangedStimDetails(global::swgemurpcserver.rpc.RangedStimPackItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRangedStimDetails = true;
        result.rangedStimDetails_ = value;
        return this;
      }
      public Builder SetRangedStimDetails(global::swgemurpcserver.rpc.RangedStimPackItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRangedStimDetails = true;
        result.rangedStimDetails_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRangedStimDetails(global::swgemurpcserver.rpc.RangedStimPackItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRangedStimDetails &&
            result.rangedStimDetails_ != global::swgemurpcserver.rpc.RangedStimPackItem.DefaultInstance) {
            result.rangedStimDetails_ = global::swgemurpcserver.rpc.RangedStimPackItem.CreateBuilder(result.rangedStimDetails_).MergeFrom(value).BuildPartial();
        } else {
          result.rangedStimDetails_ = value;
        }
        result.hasRangedStimDetails = true;
        return this;
      }
      public Builder ClearRangedStimDetails() {
        PrepareBuilder();
        result.hasRangedStimDetails = false;
        result.rangedStimDetails_ = null;
        return this;
      }
      
      public bool HasDotPackDetails {
       get { return result.hasDotPackDetails; }
      }
      public global::swgemurpcserver.rpc.DotPackItem DotPackDetails {
        get { return result.DotPackDetails; }
        set { SetDotPackDetails(value); }
      }
      public Builder SetDotPackDetails(global::swgemurpcserver.rpc.DotPackItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDotPackDetails = true;
        result.dotPackDetails_ = value;
        return this;
      }
      public Builder SetDotPackDetails(global::swgemurpcserver.rpc.DotPackItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDotPackDetails = true;
        result.dotPackDetails_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDotPackDetails(global::swgemurpcserver.rpc.DotPackItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDotPackDetails &&
            result.dotPackDetails_ != global::swgemurpcserver.rpc.DotPackItem.DefaultInstance) {
            result.dotPackDetails_ = global::swgemurpcserver.rpc.DotPackItem.CreateBuilder(result.dotPackDetails_).MergeFrom(value).BuildPartial();
        } else {
          result.dotPackDetails_ = value;
        }
        result.hasDotPackDetails = true;
        return this;
      }
      public Builder ClearDotPackDetails() {
        PrepareBuilder();
        result.hasDotPackDetails = false;
        result.dotPackDetails_ = null;
        return this;
      }
      
      public bool HasEnhancePackDetails {
       get { return result.hasEnhancePackDetails; }
      }
      public global::swgemurpcserver.rpc.EnhancePackItem EnhancePackDetails {
        get { return result.EnhancePackDetails; }
        set { SetEnhancePackDetails(value); }
      }
      public Builder SetEnhancePackDetails(global::swgemurpcserver.rpc.EnhancePackItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEnhancePackDetails = true;
        result.enhancePackDetails_ = value;
        return this;
      }
      public Builder SetEnhancePackDetails(global::swgemurpcserver.rpc.EnhancePackItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEnhancePackDetails = true;
        result.enhancePackDetails_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEnhancePackDetails(global::swgemurpcserver.rpc.EnhancePackItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEnhancePackDetails &&
            result.enhancePackDetails_ != global::swgemurpcserver.rpc.EnhancePackItem.DefaultInstance) {
            result.enhancePackDetails_ = global::swgemurpcserver.rpc.EnhancePackItem.CreateBuilder(result.enhancePackDetails_).MergeFrom(value).BuildPartial();
        } else {
          result.enhancePackDetails_ = value;
        }
        result.hasEnhancePackDetails = true;
        return this;
      }
      public Builder ClearEnhancePackDetails() {
        PrepareBuilder();
        result.hasEnhancePackDetails = false;
        result.enhancePackDetails_ = null;
        return this;
      }
      
      public bool HasReviviePackDetails {
       get { return result.hasReviviePackDetails; }
      }
      public global::swgemurpcserver.rpc.RevivePackItem ReviviePackDetails {
        get { return result.ReviviePackDetails; }
        set { SetReviviePackDetails(value); }
      }
      public Builder SetReviviePackDetails(global::swgemurpcserver.rpc.RevivePackItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReviviePackDetails = true;
        result.reviviePackDetails_ = value;
        return this;
      }
      public Builder SetReviviePackDetails(global::swgemurpcserver.rpc.RevivePackItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReviviePackDetails = true;
        result.reviviePackDetails_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReviviePackDetails(global::swgemurpcserver.rpc.RevivePackItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReviviePackDetails &&
            result.reviviePackDetails_ != global::swgemurpcserver.rpc.RevivePackItem.DefaultInstance) {
            result.reviviePackDetails_ = global::swgemurpcserver.rpc.RevivePackItem.CreateBuilder(result.reviviePackDetails_).MergeFrom(value).BuildPartial();
        } else {
          result.reviviePackDetails_ = value;
        }
        result.hasReviviePackDetails = true;
        return this;
      }
      public Builder ClearReviviePackDetails() {
        PrepareBuilder();
        result.hasReviviePackDetails = false;
        result.reviviePackDetails_ = null;
        return this;
      }
      
      public bool HasWoundPackDetails {
       get { return result.hasWoundPackDetails; }
      }
      public global::swgemurpcserver.rpc.WoundPackItem WoundPackDetails {
        get { return result.WoundPackDetails; }
        set { SetWoundPackDetails(value); }
      }
      public Builder SetWoundPackDetails(global::swgemurpcserver.rpc.WoundPackItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWoundPackDetails = true;
        result.woundPackDetails_ = value;
        return this;
      }
      public Builder SetWoundPackDetails(global::swgemurpcserver.rpc.WoundPackItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasWoundPackDetails = true;
        result.woundPackDetails_ = builderForValue.Build();
        return this;
      }
      public Builder MergeWoundPackDetails(global::swgemurpcserver.rpc.WoundPackItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasWoundPackDetails &&
            result.woundPackDetails_ != global::swgemurpcserver.rpc.WoundPackItem.DefaultInstance) {
            result.woundPackDetails_ = global::swgemurpcserver.rpc.WoundPackItem.CreateBuilder(result.woundPackDetails_).MergeFrom(value).BuildPartial();
        } else {
          result.woundPackDetails_ = value;
        }
        result.hasWoundPackDetails = true;
        return this;
      }
      public Builder ClearWoundPackDetails() {
        PrepareBuilder();
        result.hasWoundPackDetails = false;
        result.woundPackDetails_ = null;
        return this;
      }
    }
    static PharmaceuticalItem() {
      object.ReferenceEquals(global::swgemurpcserver.rpc.InventoryItem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RangedStimPackItem : pb::GeneratedMessage<RangedStimPackItem, RangedStimPackItem.Builder> {
    private RangedStimPackItem() { }
    private static readonly RangedStimPackItem defaultInstance = new RangedStimPackItem().MakeReadOnly();
    private static readonly string[] _rangedStimPackItemFieldNames = new string[] { "range_mod" };
    private static readonly uint[] _rangedStimPackItemFieldTags = new uint[] { 13 };
    public static RangedStimPackItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RangedStimPackItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RangedStimPackItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_RangedStimPackItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RangedStimPackItem, RangedStimPackItem.Builder> InternalFieldAccessors {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_RangedStimPackItem__FieldAccessorTable; }
    }
    
    public const int RangeModFieldNumber = 1;
    private bool hasRangeMod;
    private float rangeMod_;
    public bool HasRangeMod {
      get { return hasRangeMod; }
    }
    public float RangeMod {
      get { return rangeMod_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRangeMod) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rangedStimPackItemFieldNames;
      if (hasRangeMod) {
        output.WriteFloat(1, field_names[0], RangeMod);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRangeMod) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, RangeMod);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RangedStimPackItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RangedStimPackItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RangedStimPackItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RangedStimPackItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RangedStimPackItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RangedStimPackItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RangedStimPackItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RangedStimPackItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RangedStimPackItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RangedStimPackItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RangedStimPackItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RangedStimPackItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RangedStimPackItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RangedStimPackItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RangedStimPackItem result;
      
      private RangedStimPackItem PrepareBuilder() {
        if (resultIsReadOnly) {
          RangedStimPackItem original = result;
          result = new RangedStimPackItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RangedStimPackItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::swgemurpcserver.rpc.RangedStimPackItem.Descriptor; }
      }
      
      public override RangedStimPackItem DefaultInstanceForType {
        get { return global::swgemurpcserver.rpc.RangedStimPackItem.DefaultInstance; }
      }
      
      public override RangedStimPackItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RangedStimPackItem) {
          return MergeFrom((RangedStimPackItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RangedStimPackItem other) {
        if (other == global::swgemurpcserver.rpc.RangedStimPackItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRangeMod) {
          RangeMod = other.RangeMod;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rangedStimPackItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rangedStimPackItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasRangeMod = input.ReadFloat(ref result.rangeMod_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRangeMod {
        get { return result.hasRangeMod; }
      }
      public float RangeMod {
        get { return result.RangeMod; }
        set { SetRangeMod(value); }
      }
      public Builder SetRangeMod(float value) {
        PrepareBuilder();
        result.hasRangeMod = true;
        result.rangeMod_ = value;
        return this;
      }
      public Builder ClearRangeMod() {
        PrepareBuilder();
        result.hasRangeMod = false;
        result.rangeMod_ = 0F;
        return this;
      }
    }
    static RangedStimPackItem() {
      object.ReferenceEquals(global::swgemurpcserver.rpc.InventoryItem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class DotPackItem : pb::GeneratedMessage<DotPackItem, DotPackItem.Builder> {
    private DotPackItem() { }
    private static readonly DotPackItem defaultInstance = new DotPackItem().MakeReadOnly();
    private static readonly string[] _dotPackItemFieldNames = new string[] { "disease_unit", "dot_type", "duration", "poison_unit", "pool", "potency" };
    private static readonly uint[] _dotPackItemFieldTags = new uint[] { 48, 37, 21, 40, 26, 13 };
    public static DotPackItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DotPackItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DotPackItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_DotPackItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DotPackItem, DotPackItem.Builder> InternalFieldAccessors {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_DotPackItem__FieldAccessorTable; }
    }
    
    public const int PotencyFieldNumber = 1;
    private bool hasPotency;
    private float potency_;
    public bool HasPotency {
      get { return hasPotency; }
    }
    public float Potency {
      get { return potency_; }
    }
    
    public const int DurationFieldNumber = 2;
    private bool hasDuration;
    private uint duration_;
    public bool HasDuration {
      get { return hasDuration; }
    }
    [global::System.CLSCompliant(false)]
    public uint Duration {
      get { return duration_; }
    }
    
    public const int PoolFieldNumber = 3;
    private bool hasPool;
    private string pool_ = "";
    public bool HasPool {
      get { return hasPool; }
    }
    public string Pool {
      get { return pool_; }
    }
    
    public const int DotTypeFieldNumber = 4;
    private bool hasDotType;
    private uint dotType_;
    public bool HasDotType {
      get { return hasDotType; }
    }
    [global::System.CLSCompliant(false)]
    public uint DotType {
      get { return dotType_; }
    }
    
    public const int PoisonUnitFieldNumber = 5;
    private bool hasPoisonUnit;
    private bool poisonUnit_;
    public bool HasPoisonUnit {
      get { return hasPoisonUnit; }
    }
    public bool PoisonUnit {
      get { return poisonUnit_; }
    }
    
    public const int DiseaseUnitFieldNumber = 6;
    private bool hasDiseaseUnit;
    private bool diseaseUnit_;
    public bool HasDiseaseUnit {
      get { return hasDiseaseUnit; }
    }
    public bool DiseaseUnit {
      get { return diseaseUnit_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPotency) return false;
        if (!hasDuration) return false;
        if (!hasPool) return false;
        if (!hasDotType) return false;
        if (!hasPoisonUnit) return false;
        if (!hasDiseaseUnit) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _dotPackItemFieldNames;
      if (hasPotency) {
        output.WriteFloat(1, field_names[5], Potency);
      }
      if (hasDuration) {
        output.WriteFixed32(2, field_names[2], Duration);
      }
      if (hasPool) {
        output.WriteString(3, field_names[4], Pool);
      }
      if (hasDotType) {
        output.WriteFixed32(4, field_names[1], DotType);
      }
      if (hasPoisonUnit) {
        output.WriteBool(5, field_names[3], PoisonUnit);
      }
      if (hasDiseaseUnit) {
        output.WriteBool(6, field_names[0], DiseaseUnit);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPotency) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, Potency);
        }
        if (hasDuration) {
          size += pb::CodedOutputStream.ComputeFixed32Size(2, Duration);
        }
        if (hasPool) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Pool);
        }
        if (hasDotType) {
          size += pb::CodedOutputStream.ComputeFixed32Size(4, DotType);
        }
        if (hasPoisonUnit) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, PoisonUnit);
        }
        if (hasDiseaseUnit) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, DiseaseUnit);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DotPackItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DotPackItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DotPackItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DotPackItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DotPackItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DotPackItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DotPackItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DotPackItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DotPackItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DotPackItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DotPackItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DotPackItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<DotPackItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DotPackItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DotPackItem result;
      
      private DotPackItem PrepareBuilder() {
        if (resultIsReadOnly) {
          DotPackItem original = result;
          result = new DotPackItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DotPackItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::swgemurpcserver.rpc.DotPackItem.Descriptor; }
      }
      
      public override DotPackItem DefaultInstanceForType {
        get { return global::swgemurpcserver.rpc.DotPackItem.DefaultInstance; }
      }
      
      public override DotPackItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DotPackItem) {
          return MergeFrom((DotPackItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DotPackItem other) {
        if (other == global::swgemurpcserver.rpc.DotPackItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPotency) {
          Potency = other.Potency;
        }
        if (other.HasDuration) {
          Duration = other.Duration;
        }
        if (other.HasPool) {
          Pool = other.Pool;
        }
        if (other.HasDotType) {
          DotType = other.DotType;
        }
        if (other.HasPoisonUnit) {
          PoisonUnit = other.PoisonUnit;
        }
        if (other.HasDiseaseUnit) {
          DiseaseUnit = other.DiseaseUnit;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_dotPackItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _dotPackItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasPotency = input.ReadFloat(ref result.potency_);
              break;
            }
            case 21: {
              result.hasDuration = input.ReadFixed32(ref result.duration_);
              break;
            }
            case 26: {
              result.hasPool = input.ReadString(ref result.pool_);
              break;
            }
            case 37: {
              result.hasDotType = input.ReadFixed32(ref result.dotType_);
              break;
            }
            case 40: {
              result.hasPoisonUnit = input.ReadBool(ref result.poisonUnit_);
              break;
            }
            case 48: {
              result.hasDiseaseUnit = input.ReadBool(ref result.diseaseUnit_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPotency {
        get { return result.hasPotency; }
      }
      public float Potency {
        get { return result.Potency; }
        set { SetPotency(value); }
      }
      public Builder SetPotency(float value) {
        PrepareBuilder();
        result.hasPotency = true;
        result.potency_ = value;
        return this;
      }
      public Builder ClearPotency() {
        PrepareBuilder();
        result.hasPotency = false;
        result.potency_ = 0F;
        return this;
      }
      
      public bool HasDuration {
        get { return result.hasDuration; }
      }
      [global::System.CLSCompliant(false)]
      public uint Duration {
        get { return result.Duration; }
        set { SetDuration(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDuration(uint value) {
        PrepareBuilder();
        result.hasDuration = true;
        result.duration_ = value;
        return this;
      }
      public Builder ClearDuration() {
        PrepareBuilder();
        result.hasDuration = false;
        result.duration_ = 0;
        return this;
      }
      
      public bool HasPool {
        get { return result.hasPool; }
      }
      public string Pool {
        get { return result.Pool; }
        set { SetPool(value); }
      }
      public Builder SetPool(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPool = true;
        result.pool_ = value;
        return this;
      }
      public Builder ClearPool() {
        PrepareBuilder();
        result.hasPool = false;
        result.pool_ = "";
        return this;
      }
      
      public bool HasDotType {
        get { return result.hasDotType; }
      }
      [global::System.CLSCompliant(false)]
      public uint DotType {
        get { return result.DotType; }
        set { SetDotType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetDotType(uint value) {
        PrepareBuilder();
        result.hasDotType = true;
        result.dotType_ = value;
        return this;
      }
      public Builder ClearDotType() {
        PrepareBuilder();
        result.hasDotType = false;
        result.dotType_ = 0;
        return this;
      }
      
      public bool HasPoisonUnit {
        get { return result.hasPoisonUnit; }
      }
      public bool PoisonUnit {
        get { return result.PoisonUnit; }
        set { SetPoisonUnit(value); }
      }
      public Builder SetPoisonUnit(bool value) {
        PrepareBuilder();
        result.hasPoisonUnit = true;
        result.poisonUnit_ = value;
        return this;
      }
      public Builder ClearPoisonUnit() {
        PrepareBuilder();
        result.hasPoisonUnit = false;
        result.poisonUnit_ = false;
        return this;
      }
      
      public bool HasDiseaseUnit {
        get { return result.hasDiseaseUnit; }
      }
      public bool DiseaseUnit {
        get { return result.DiseaseUnit; }
        set { SetDiseaseUnit(value); }
      }
      public Builder SetDiseaseUnit(bool value) {
        PrepareBuilder();
        result.hasDiseaseUnit = true;
        result.diseaseUnit_ = value;
        return this;
      }
      public Builder ClearDiseaseUnit() {
        PrepareBuilder();
        result.hasDiseaseUnit = false;
        result.diseaseUnit_ = false;
        return this;
      }
    }
    static DotPackItem() {
      object.ReferenceEquals(global::swgemurpcserver.rpc.InventoryItem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class EnhancePackItem : pb::GeneratedMessage<EnhancePackItem, EnhancePackItem.Builder> {
    private EnhancePackItem() { }
    private static readonly EnhancePackItem defaultInstance = new EnhancePackItem().MakeReadOnly();
    private static readonly string[] _enhancePackItemFieldNames = new string[] { "attribute", "duration" };
    private static readonly uint[] _enhancePackItemFieldTags = new uint[] { 18, 13 };
    public static EnhancePackItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EnhancePackItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EnhancePackItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_EnhancePackItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EnhancePackItem, EnhancePackItem.Builder> InternalFieldAccessors {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_EnhancePackItem__FieldAccessorTable; }
    }
    
    public const int DurationFieldNumber = 1;
    private bool hasDuration;
    private float duration_;
    public bool HasDuration {
      get { return hasDuration; }
    }
    public float Duration {
      get { return duration_; }
    }
    
    public const int AttributeFieldNumber = 2;
    private bool hasAttribute;
    private string attribute_ = "";
    public bool HasAttribute {
      get { return hasAttribute; }
    }
    public string Attribute {
      get { return attribute_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasDuration) return false;
        if (!hasAttribute) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _enhancePackItemFieldNames;
      if (hasDuration) {
        output.WriteFloat(1, field_names[1], Duration);
      }
      if (hasAttribute) {
        output.WriteString(2, field_names[0], Attribute);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasDuration) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, Duration);
        }
        if (hasAttribute) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Attribute);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EnhancePackItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EnhancePackItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EnhancePackItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EnhancePackItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EnhancePackItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EnhancePackItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EnhancePackItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EnhancePackItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EnhancePackItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EnhancePackItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EnhancePackItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EnhancePackItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<EnhancePackItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EnhancePackItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EnhancePackItem result;
      
      private EnhancePackItem PrepareBuilder() {
        if (resultIsReadOnly) {
          EnhancePackItem original = result;
          result = new EnhancePackItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EnhancePackItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::swgemurpcserver.rpc.EnhancePackItem.Descriptor; }
      }
      
      public override EnhancePackItem DefaultInstanceForType {
        get { return global::swgemurpcserver.rpc.EnhancePackItem.DefaultInstance; }
      }
      
      public override EnhancePackItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EnhancePackItem) {
          return MergeFrom((EnhancePackItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EnhancePackItem other) {
        if (other == global::swgemurpcserver.rpc.EnhancePackItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasDuration) {
          Duration = other.Duration;
        }
        if (other.HasAttribute) {
          Attribute = other.Attribute;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_enhancePackItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _enhancePackItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasDuration = input.ReadFloat(ref result.duration_);
              break;
            }
            case 18: {
              result.hasAttribute = input.ReadString(ref result.attribute_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasDuration {
        get { return result.hasDuration; }
      }
      public float Duration {
        get { return result.Duration; }
        set { SetDuration(value); }
      }
      public Builder SetDuration(float value) {
        PrepareBuilder();
        result.hasDuration = true;
        result.duration_ = value;
        return this;
      }
      public Builder ClearDuration() {
        PrepareBuilder();
        result.hasDuration = false;
        result.duration_ = 0F;
        return this;
      }
      
      public bool HasAttribute {
        get { return result.hasAttribute; }
      }
      public string Attribute {
        get { return result.Attribute; }
        set { SetAttribute(value); }
      }
      public Builder SetAttribute(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAttribute = true;
        result.attribute_ = value;
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.hasAttribute = false;
        result.attribute_ = "";
        return this;
      }
    }
    static EnhancePackItem() {
      object.ReferenceEquals(global::swgemurpcserver.rpc.InventoryItem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RevivePackItem : pb::GeneratedMessage<RevivePackItem, RevivePackItem.Builder> {
    private RevivePackItem() { }
    private static readonly RevivePackItem defaultInstance = new RevivePackItem().MakeReadOnly();
    private static readonly string[] _revivePackItemFieldNames = new string[] { "action_healed", "action_wound_healed", "health_healed", "health_wound_healed", "mind_healed", "mind_wound_healed" };
    private static readonly uint[] _revivePackItemFieldTags = new uint[] { 37, 29, 21, 13, 53, 45 };
    public static RevivePackItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RevivePackItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RevivePackItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_RevivePackItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RevivePackItem, RevivePackItem.Builder> InternalFieldAccessors {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_RevivePackItem__FieldAccessorTable; }
    }
    
    public const int HealthWoundHealedFieldNumber = 1;
    private bool hasHealthWoundHealed;
    private float healthWoundHealed_;
    public bool HasHealthWoundHealed {
      get { return hasHealthWoundHealed; }
    }
    public float HealthWoundHealed {
      get { return healthWoundHealed_; }
    }
    
    public const int HealthHealedFieldNumber = 2;
    private bool hasHealthHealed;
    private float healthHealed_;
    public bool HasHealthHealed {
      get { return hasHealthHealed; }
    }
    public float HealthHealed {
      get { return healthHealed_; }
    }
    
    public const int ActionWoundHealedFieldNumber = 3;
    private bool hasActionWoundHealed;
    private float actionWoundHealed_;
    public bool HasActionWoundHealed {
      get { return hasActionWoundHealed; }
    }
    public float ActionWoundHealed {
      get { return actionWoundHealed_; }
    }
    
    public const int ActionHealedFieldNumber = 4;
    private bool hasActionHealed;
    private float actionHealed_;
    public bool HasActionHealed {
      get { return hasActionHealed; }
    }
    public float ActionHealed {
      get { return actionHealed_; }
    }
    
    public const int MindWoundHealedFieldNumber = 5;
    private bool hasMindWoundHealed;
    private float mindWoundHealed_;
    public bool HasMindWoundHealed {
      get { return hasMindWoundHealed; }
    }
    public float MindWoundHealed {
      get { return mindWoundHealed_; }
    }
    
    public const int MindHealedFieldNumber = 6;
    private bool hasMindHealed;
    private float mindHealed_;
    public bool HasMindHealed {
      get { return hasMindHealed; }
    }
    public float MindHealed {
      get { return mindHealed_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasHealthWoundHealed) return false;
        if (!hasHealthHealed) return false;
        if (!hasActionWoundHealed) return false;
        if (!hasActionHealed) return false;
        if (!hasMindWoundHealed) return false;
        if (!hasMindHealed) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _revivePackItemFieldNames;
      if (hasHealthWoundHealed) {
        output.WriteFloat(1, field_names[3], HealthWoundHealed);
      }
      if (hasHealthHealed) {
        output.WriteFloat(2, field_names[2], HealthHealed);
      }
      if (hasActionWoundHealed) {
        output.WriteFloat(3, field_names[1], ActionWoundHealed);
      }
      if (hasActionHealed) {
        output.WriteFloat(4, field_names[0], ActionHealed);
      }
      if (hasMindWoundHealed) {
        output.WriteFloat(5, field_names[5], MindWoundHealed);
      }
      if (hasMindHealed) {
        output.WriteFloat(6, field_names[4], MindHealed);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasHealthWoundHealed) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, HealthWoundHealed);
        }
        if (hasHealthHealed) {
          size += pb::CodedOutputStream.ComputeFloatSize(2, HealthHealed);
        }
        if (hasActionWoundHealed) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, ActionWoundHealed);
        }
        if (hasActionHealed) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, ActionHealed);
        }
        if (hasMindWoundHealed) {
          size += pb::CodedOutputStream.ComputeFloatSize(5, MindWoundHealed);
        }
        if (hasMindHealed) {
          size += pb::CodedOutputStream.ComputeFloatSize(6, MindHealed);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RevivePackItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RevivePackItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RevivePackItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RevivePackItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RevivePackItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RevivePackItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RevivePackItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RevivePackItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RevivePackItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RevivePackItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RevivePackItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RevivePackItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RevivePackItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RevivePackItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RevivePackItem result;
      
      private RevivePackItem PrepareBuilder() {
        if (resultIsReadOnly) {
          RevivePackItem original = result;
          result = new RevivePackItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RevivePackItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::swgemurpcserver.rpc.RevivePackItem.Descriptor; }
      }
      
      public override RevivePackItem DefaultInstanceForType {
        get { return global::swgemurpcserver.rpc.RevivePackItem.DefaultInstance; }
      }
      
      public override RevivePackItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RevivePackItem) {
          return MergeFrom((RevivePackItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RevivePackItem other) {
        if (other == global::swgemurpcserver.rpc.RevivePackItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasHealthWoundHealed) {
          HealthWoundHealed = other.HealthWoundHealed;
        }
        if (other.HasHealthHealed) {
          HealthHealed = other.HealthHealed;
        }
        if (other.HasActionWoundHealed) {
          ActionWoundHealed = other.ActionWoundHealed;
        }
        if (other.HasActionHealed) {
          ActionHealed = other.ActionHealed;
        }
        if (other.HasMindWoundHealed) {
          MindWoundHealed = other.MindWoundHealed;
        }
        if (other.HasMindHealed) {
          MindHealed = other.MindHealed;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_revivePackItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _revivePackItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasHealthWoundHealed = input.ReadFloat(ref result.healthWoundHealed_);
              break;
            }
            case 21: {
              result.hasHealthHealed = input.ReadFloat(ref result.healthHealed_);
              break;
            }
            case 29: {
              result.hasActionWoundHealed = input.ReadFloat(ref result.actionWoundHealed_);
              break;
            }
            case 37: {
              result.hasActionHealed = input.ReadFloat(ref result.actionHealed_);
              break;
            }
            case 45: {
              result.hasMindWoundHealed = input.ReadFloat(ref result.mindWoundHealed_);
              break;
            }
            case 53: {
              result.hasMindHealed = input.ReadFloat(ref result.mindHealed_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasHealthWoundHealed {
        get { return result.hasHealthWoundHealed; }
      }
      public float HealthWoundHealed {
        get { return result.HealthWoundHealed; }
        set { SetHealthWoundHealed(value); }
      }
      public Builder SetHealthWoundHealed(float value) {
        PrepareBuilder();
        result.hasHealthWoundHealed = true;
        result.healthWoundHealed_ = value;
        return this;
      }
      public Builder ClearHealthWoundHealed() {
        PrepareBuilder();
        result.hasHealthWoundHealed = false;
        result.healthWoundHealed_ = 0F;
        return this;
      }
      
      public bool HasHealthHealed {
        get { return result.hasHealthHealed; }
      }
      public float HealthHealed {
        get { return result.HealthHealed; }
        set { SetHealthHealed(value); }
      }
      public Builder SetHealthHealed(float value) {
        PrepareBuilder();
        result.hasHealthHealed = true;
        result.healthHealed_ = value;
        return this;
      }
      public Builder ClearHealthHealed() {
        PrepareBuilder();
        result.hasHealthHealed = false;
        result.healthHealed_ = 0F;
        return this;
      }
      
      public bool HasActionWoundHealed {
        get { return result.hasActionWoundHealed; }
      }
      public float ActionWoundHealed {
        get { return result.ActionWoundHealed; }
        set { SetActionWoundHealed(value); }
      }
      public Builder SetActionWoundHealed(float value) {
        PrepareBuilder();
        result.hasActionWoundHealed = true;
        result.actionWoundHealed_ = value;
        return this;
      }
      public Builder ClearActionWoundHealed() {
        PrepareBuilder();
        result.hasActionWoundHealed = false;
        result.actionWoundHealed_ = 0F;
        return this;
      }
      
      public bool HasActionHealed {
        get { return result.hasActionHealed; }
      }
      public float ActionHealed {
        get { return result.ActionHealed; }
        set { SetActionHealed(value); }
      }
      public Builder SetActionHealed(float value) {
        PrepareBuilder();
        result.hasActionHealed = true;
        result.actionHealed_ = value;
        return this;
      }
      public Builder ClearActionHealed() {
        PrepareBuilder();
        result.hasActionHealed = false;
        result.actionHealed_ = 0F;
        return this;
      }
      
      public bool HasMindWoundHealed {
        get { return result.hasMindWoundHealed; }
      }
      public float MindWoundHealed {
        get { return result.MindWoundHealed; }
        set { SetMindWoundHealed(value); }
      }
      public Builder SetMindWoundHealed(float value) {
        PrepareBuilder();
        result.hasMindWoundHealed = true;
        result.mindWoundHealed_ = value;
        return this;
      }
      public Builder ClearMindWoundHealed() {
        PrepareBuilder();
        result.hasMindWoundHealed = false;
        result.mindWoundHealed_ = 0F;
        return this;
      }
      
      public bool HasMindHealed {
        get { return result.hasMindHealed; }
      }
      public float MindHealed {
        get { return result.MindHealed; }
        set { SetMindHealed(value); }
      }
      public Builder SetMindHealed(float value) {
        PrepareBuilder();
        result.hasMindHealed = true;
        result.mindHealed_ = value;
        return this;
      }
      public Builder ClearMindHealed() {
        PrepareBuilder();
        result.hasMindHealed = false;
        result.mindHealed_ = 0F;
        return this;
      }
    }
    static RevivePackItem() {
      object.ReferenceEquals(global::swgemurpcserver.rpc.InventoryItem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class WoundPackItem : pb::GeneratedMessage<WoundPackItem, WoundPackItem.Builder> {
    private WoundPackItem() { }
    private static readonly WoundPackItem defaultInstance = new WoundPackItem().MakeReadOnly();
    private static readonly string[] _woundPackItemFieldNames = new string[] { "attribute" };
    private static readonly uint[] _woundPackItemFieldTags = new uint[] { 10 };
    public static WoundPackItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override WoundPackItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override WoundPackItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_WoundPackItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<WoundPackItem, WoundPackItem.Builder> InternalFieldAccessors {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_WoundPackItem__FieldAccessorTable; }
    }
    
    public const int AttributeFieldNumber = 1;
    private bool hasAttribute;
    private string attribute_ = "";
    public bool HasAttribute {
      get { return hasAttribute; }
    }
    public string Attribute {
      get { return attribute_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAttribute) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _woundPackItemFieldNames;
      if (hasAttribute) {
        output.WriteString(1, field_names[0], Attribute);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAttribute) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Attribute);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static WoundPackItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WoundPackItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WoundPackItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static WoundPackItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static WoundPackItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WoundPackItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static WoundPackItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static WoundPackItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static WoundPackItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static WoundPackItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private WoundPackItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(WoundPackItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<WoundPackItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(WoundPackItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private WoundPackItem result;
      
      private WoundPackItem PrepareBuilder() {
        if (resultIsReadOnly) {
          WoundPackItem original = result;
          result = new WoundPackItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override WoundPackItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::swgemurpcserver.rpc.WoundPackItem.Descriptor; }
      }
      
      public override WoundPackItem DefaultInstanceForType {
        get { return global::swgemurpcserver.rpc.WoundPackItem.DefaultInstance; }
      }
      
      public override WoundPackItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is WoundPackItem) {
          return MergeFrom((WoundPackItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(WoundPackItem other) {
        if (other == global::swgemurpcserver.rpc.WoundPackItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAttribute) {
          Attribute = other.Attribute;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_woundPackItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _woundPackItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAttribute = input.ReadString(ref result.attribute_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAttribute {
        get { return result.hasAttribute; }
      }
      public string Attribute {
        get { return result.Attribute; }
        set { SetAttribute(value); }
      }
      public Builder SetAttribute(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAttribute = true;
        result.attribute_ = value;
        return this;
      }
      public Builder ClearAttribute() {
        PrepareBuilder();
        result.hasAttribute = false;
        result.attribute_ = "";
        return this;
      }
    }
    static WoundPackItem() {
      object.ReferenceEquals(global::swgemurpcserver.rpc.InventoryItem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CraftingComponentItem : pb::GeneratedMessage<CraftingComponentItem, CraftingComponentItem.Builder> {
    private CraftingComponentItem() { }
    private static readonly CraftingComponentItem defaultInstance = new CraftingComponentItem().MakeReadOnly();
    private static readonly string[] _craftingComponentItemFieldNames = new string[] { "attributes" };
    private static readonly uint[] _craftingComponentItemFieldTags = new uint[] { 10 };
    public static CraftingComponentItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CraftingComponentItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CraftingComponentItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_CraftingComponentItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CraftingComponentItem, CraftingComponentItem.Builder> InternalFieldAccessors {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_CraftingComponentItem__FieldAccessorTable; }
    }
    
    public const int AttributesFieldNumber = 1;
    private pbc::PopsicleList<global::swgemurpcserver.rpc.CraftingComponentAttribute> attributes_ = new pbc::PopsicleList<global::swgemurpcserver.rpc.CraftingComponentAttribute>();
    public scg::IList<global::swgemurpcserver.rpc.CraftingComponentAttribute> AttributesList {
      get { return attributes_; }
    }
    public int AttributesCount {
      get { return attributes_.Count; }
    }
    public global::swgemurpcserver.rpc.CraftingComponentAttribute GetAttributes(int index) {
      return attributes_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::swgemurpcserver.rpc.CraftingComponentAttribute element in AttributesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _craftingComponentItemFieldNames;
      if (attributes_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], attributes_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::swgemurpcserver.rpc.CraftingComponentAttribute element in AttributesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CraftingComponentItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CraftingComponentItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CraftingComponentItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CraftingComponentItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CraftingComponentItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CraftingComponentItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CraftingComponentItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CraftingComponentItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CraftingComponentItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CraftingComponentItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CraftingComponentItem MakeReadOnly() {
      attributes_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CraftingComponentItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CraftingComponentItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CraftingComponentItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CraftingComponentItem result;
      
      private CraftingComponentItem PrepareBuilder() {
        if (resultIsReadOnly) {
          CraftingComponentItem original = result;
          result = new CraftingComponentItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CraftingComponentItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::swgemurpcserver.rpc.CraftingComponentItem.Descriptor; }
      }
      
      public override CraftingComponentItem DefaultInstanceForType {
        get { return global::swgemurpcserver.rpc.CraftingComponentItem.DefaultInstance; }
      }
      
      public override CraftingComponentItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CraftingComponentItem) {
          return MergeFrom((CraftingComponentItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CraftingComponentItem other) {
        if (other == global::swgemurpcserver.rpc.CraftingComponentItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.attributes_.Count != 0) {
          result.attributes_.Add(other.attributes_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_craftingComponentItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _craftingComponentItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.attributes_, global::swgemurpcserver.rpc.CraftingComponentAttribute.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::swgemurpcserver.rpc.CraftingComponentAttribute> AttributesList {
        get { return PrepareBuilder().attributes_; }
      }
      public int AttributesCount {
        get { return result.AttributesCount; }
      }
      public global::swgemurpcserver.rpc.CraftingComponentAttribute GetAttributes(int index) {
        return result.GetAttributes(index);
      }
      public Builder SetAttributes(int index, global::swgemurpcserver.rpc.CraftingComponentAttribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_[index] = value;
        return this;
      }
      public Builder SetAttributes(int index, global::swgemurpcserver.rpc.CraftingComponentAttribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttributes(global::swgemurpcserver.rpc.CraftingComponentAttribute value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attributes_.Add(value);
        return this;
      }
      public Builder AddAttributes(global::swgemurpcserver.rpc.CraftingComponentAttribute.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attributes_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttributes(scg::IEnumerable<global::swgemurpcserver.rpc.CraftingComponentAttribute> values) {
        PrepareBuilder();
        result.attributes_.Add(values);
        return this;
      }
      public Builder ClearAttributes() {
        PrepareBuilder();
        result.attributes_.Clear();
        return this;
      }
    }
    static CraftingComponentItem() {
      object.ReferenceEquals(global::swgemurpcserver.rpc.InventoryItem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CraftingComponentAttribute : pb::GeneratedMessage<CraftingComponentAttribute, CraftingComponentAttribute.Builder> {
    private CraftingComponentAttribute() { }
    private static readonly CraftingComponentAttribute defaultInstance = new CraftingComponentAttribute().MakeReadOnly();
    private static readonly string[] _craftingComponentAttributeFieldNames = new string[] { "hidden", "id", "precision", "tite", "value" };
    private static readonly uint[] _craftingComponentAttributeFieldTags = new uint[] { 40, 10, 24, 18, 37 };
    public static CraftingComponentAttribute DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CraftingComponentAttribute DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CraftingComponentAttribute ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_CraftingComponentAttribute__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CraftingComponentAttribute, CraftingComponentAttribute.Builder> InternalFieldAccessors {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_CraftingComponentAttribute__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int TiteFieldNumber = 2;
    private bool hasTite;
    private string tite_ = "";
    public bool HasTite {
      get { return hasTite; }
    }
    public string Tite {
      get { return tite_; }
    }
    
    public const int PrecisionFieldNumber = 3;
    private bool hasPrecision;
    private int precision_;
    public bool HasPrecision {
      get { return hasPrecision; }
    }
    public int Precision {
      get { return precision_; }
    }
    
    public const int ValueFieldNumber = 4;
    private bool hasValue;
    private float value_;
    public bool HasValue {
      get { return hasValue; }
    }
    public float Value {
      get { return value_; }
    }
    
    public const int HiddenFieldNumber = 5;
    private bool hasHidden;
    private bool hidden_;
    public bool HasHidden {
      get { return hasHidden; }
    }
    public bool Hidden {
      get { return hidden_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasTite) return false;
        if (!hasPrecision) return false;
        if (!hasValue) return false;
        if (!hasHidden) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _craftingComponentAttributeFieldNames;
      if (hasId) {
        output.WriteString(1, field_names[1], Id);
      }
      if (hasTite) {
        output.WriteString(2, field_names[3], Tite);
      }
      if (hasPrecision) {
        output.WriteInt32(3, field_names[2], Precision);
      }
      if (hasValue) {
        output.WriteFloat(4, field_names[4], Value);
      }
      if (hasHidden) {
        output.WriteBool(5, field_names[0], Hidden);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Id);
        }
        if (hasTite) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Tite);
        }
        if (hasPrecision) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Precision);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, Value);
        }
        if (hasHidden) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, Hidden);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CraftingComponentAttribute ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CraftingComponentAttribute ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CraftingComponentAttribute ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CraftingComponentAttribute ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CraftingComponentAttribute ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CraftingComponentAttribute ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CraftingComponentAttribute ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CraftingComponentAttribute ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CraftingComponentAttribute ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CraftingComponentAttribute ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CraftingComponentAttribute MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CraftingComponentAttribute prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CraftingComponentAttribute, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CraftingComponentAttribute cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CraftingComponentAttribute result;
      
      private CraftingComponentAttribute PrepareBuilder() {
        if (resultIsReadOnly) {
          CraftingComponentAttribute original = result;
          result = new CraftingComponentAttribute();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CraftingComponentAttribute MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::swgemurpcserver.rpc.CraftingComponentAttribute.Descriptor; }
      }
      
      public override CraftingComponentAttribute DefaultInstanceForType {
        get { return global::swgemurpcserver.rpc.CraftingComponentAttribute.DefaultInstance; }
      }
      
      public override CraftingComponentAttribute BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CraftingComponentAttribute) {
          return MergeFrom((CraftingComponentAttribute) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CraftingComponentAttribute other) {
        if (other == global::swgemurpcserver.rpc.CraftingComponentAttribute.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasTite) {
          Tite = other.Tite;
        }
        if (other.HasPrecision) {
          Precision = other.Precision;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        if (other.HasHidden) {
          Hidden = other.Hidden;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_craftingComponentAttributeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _craftingComponentAttributeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasId = input.ReadString(ref result.id_);
              break;
            }
            case 18: {
              result.hasTite = input.ReadString(ref result.tite_);
              break;
            }
            case 24: {
              result.hasPrecision = input.ReadInt32(ref result.precision_);
              break;
            }
            case 37: {
              result.hasValue = input.ReadFloat(ref result.value_);
              break;
            }
            case 40: {
              result.hasHidden = input.ReadBool(ref result.hidden_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasTite {
        get { return result.hasTite; }
      }
      public string Tite {
        get { return result.Tite; }
        set { SetTite(value); }
      }
      public Builder SetTite(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTite = true;
        result.tite_ = value;
        return this;
      }
      public Builder ClearTite() {
        PrepareBuilder();
        result.hasTite = false;
        result.tite_ = "";
        return this;
      }
      
      public bool HasPrecision {
        get { return result.hasPrecision; }
      }
      public int Precision {
        get { return result.Precision; }
        set { SetPrecision(value); }
      }
      public Builder SetPrecision(int value) {
        PrepareBuilder();
        result.hasPrecision = true;
        result.precision_ = value;
        return this;
      }
      public Builder ClearPrecision() {
        PrepareBuilder();
        result.hasPrecision = false;
        result.precision_ = 0;
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public float Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(float value) {
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = 0F;
        return this;
      }
      
      public bool HasHidden {
        get { return result.hasHidden; }
      }
      public bool Hidden {
        get { return result.Hidden; }
        set { SetHidden(value); }
      }
      public Builder SetHidden(bool value) {
        PrepareBuilder();
        result.hasHidden = true;
        result.hidden_ = value;
        return this;
      }
      public Builder ClearHidden() {
        PrepareBuilder();
        result.hasHidden = false;
        result.hidden_ = false;
        return this;
      }
    }
    static CraftingComponentAttribute() {
      object.ReferenceEquals(global::swgemurpcserver.rpc.InventoryItem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ManufacturingSchematicItem : pb::GeneratedMessage<ManufacturingSchematicItem, ManufacturingSchematicItem.Builder> {
    private ManufacturingSchematicItem() { }
    private static readonly ManufacturingSchematicItem defaultInstance = new ManufacturingSchematicItem().MakeReadOnly();
    private static readonly string[] _manufacturingSchematicItemFieldNames = new string[] { "blueprint_entries", "ingredients", "manufacture_limit", "prototype_details" };
    private static readonly uint[] _manufacturingSchematicItemFieldTags = new uint[] { 26, 34, 8, 18 };
    public static ManufacturingSchematicItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ManufacturingSchematicItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ManufacturingSchematicItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_ManufacturingSchematicItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ManufacturingSchematicItem, ManufacturingSchematicItem.Builder> InternalFieldAccessors {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_ManufacturingSchematicItem__FieldAccessorTable; }
    }
    
    public const int ManufactureLimitFieldNumber = 1;
    private bool hasManufactureLimit;
    private int manufactureLimit_;
    public bool HasManufactureLimit {
      get { return hasManufactureLimit; }
    }
    public int ManufactureLimit {
      get { return manufactureLimit_; }
    }
    
    public const int PrototypeDetailsFieldNumber = 2;
    private bool hasPrototypeDetails;
    private global::swgemurpcserver.rpc.CharacterInventoryItem prototypeDetails_;
    public bool HasPrototypeDetails {
      get { return hasPrototypeDetails; }
    }
    public global::swgemurpcserver.rpc.CharacterInventoryItem PrototypeDetails {
      get { return prototypeDetails_ ?? global::swgemurpcserver.rpc.CharacterInventoryItem.DefaultInstance; }
    }
    
    public const int BlueprintEntriesFieldNumber = 3;
    private pbc::PopsicleList<global::swgemurpcserver.rpc.BlueprintEntryItem> blueprintEntries_ = new pbc::PopsicleList<global::swgemurpcserver.rpc.BlueprintEntryItem>();
    public scg::IList<global::swgemurpcserver.rpc.BlueprintEntryItem> BlueprintEntriesList {
      get { return blueprintEntries_; }
    }
    public int BlueprintEntriesCount {
      get { return blueprintEntries_.Count; }
    }
    public global::swgemurpcserver.rpc.BlueprintEntryItem GetBlueprintEntries(int index) {
      return blueprintEntries_[index];
    }
    
    public const int IngredientsFieldNumber = 4;
    private pbc::PopsicleList<global::swgemurpcserver.rpc.IngredientItem> ingredients_ = new pbc::PopsicleList<global::swgemurpcserver.rpc.IngredientItem>();
    public scg::IList<global::swgemurpcserver.rpc.IngredientItem> IngredientsList {
      get { return ingredients_; }
    }
    public int IngredientsCount {
      get { return ingredients_.Count; }
    }
    public global::swgemurpcserver.rpc.IngredientItem GetIngredients(int index) {
      return ingredients_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasManufactureLimit) return false;
        if (!hasPrototypeDetails) return false;
        if (!PrototypeDetails.IsInitialized) return false;
        foreach (global::swgemurpcserver.rpc.BlueprintEntryItem element in BlueprintEntriesList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::swgemurpcserver.rpc.IngredientItem element in IngredientsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _manufacturingSchematicItemFieldNames;
      if (hasManufactureLimit) {
        output.WriteInt32(1, field_names[2], ManufactureLimit);
      }
      if (hasPrototypeDetails) {
        output.WriteMessage(2, field_names[3], PrototypeDetails);
      }
      if (blueprintEntries_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], blueprintEntries_);
      }
      if (ingredients_.Count > 0) {
        output.WriteMessageArray(4, field_names[1], ingredients_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasManufactureLimit) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, ManufactureLimit);
        }
        if (hasPrototypeDetails) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, PrototypeDetails);
        }
        foreach (global::swgemurpcserver.rpc.BlueprintEntryItem element in BlueprintEntriesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        foreach (global::swgemurpcserver.rpc.IngredientItem element in IngredientsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ManufacturingSchematicItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ManufacturingSchematicItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ManufacturingSchematicItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ManufacturingSchematicItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ManufacturingSchematicItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ManufacturingSchematicItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ManufacturingSchematicItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ManufacturingSchematicItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ManufacturingSchematicItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ManufacturingSchematicItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ManufacturingSchematicItem MakeReadOnly() {
      blueprintEntries_.MakeReadOnly();
      ingredients_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ManufacturingSchematicItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ManufacturingSchematicItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ManufacturingSchematicItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ManufacturingSchematicItem result;
      
      private ManufacturingSchematicItem PrepareBuilder() {
        if (resultIsReadOnly) {
          ManufacturingSchematicItem original = result;
          result = new ManufacturingSchematicItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ManufacturingSchematicItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::swgemurpcserver.rpc.ManufacturingSchematicItem.Descriptor; }
      }
      
      public override ManufacturingSchematicItem DefaultInstanceForType {
        get { return global::swgemurpcserver.rpc.ManufacturingSchematicItem.DefaultInstance; }
      }
      
      public override ManufacturingSchematicItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ManufacturingSchematicItem) {
          return MergeFrom((ManufacturingSchematicItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ManufacturingSchematicItem other) {
        if (other == global::swgemurpcserver.rpc.ManufacturingSchematicItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasManufactureLimit) {
          ManufactureLimit = other.ManufactureLimit;
        }
        if (other.HasPrototypeDetails) {
          MergePrototypeDetails(other.PrototypeDetails);
        }
        if (other.blueprintEntries_.Count != 0) {
          result.blueprintEntries_.Add(other.blueprintEntries_);
        }
        if (other.ingredients_.Count != 0) {
          result.ingredients_.Add(other.ingredients_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_manufacturingSchematicItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _manufacturingSchematicItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasManufactureLimit = input.ReadInt32(ref result.manufactureLimit_);
              break;
            }
            case 18: {
              global::swgemurpcserver.rpc.CharacterInventoryItem.Builder subBuilder = global::swgemurpcserver.rpc.CharacterInventoryItem.CreateBuilder();
              if (result.hasPrototypeDetails) {
                subBuilder.MergeFrom(PrototypeDetails);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PrototypeDetails = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.blueprintEntries_, global::swgemurpcserver.rpc.BlueprintEntryItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.ingredients_, global::swgemurpcserver.rpc.IngredientItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasManufactureLimit {
        get { return result.hasManufactureLimit; }
      }
      public int ManufactureLimit {
        get { return result.ManufactureLimit; }
        set { SetManufactureLimit(value); }
      }
      public Builder SetManufactureLimit(int value) {
        PrepareBuilder();
        result.hasManufactureLimit = true;
        result.manufactureLimit_ = value;
        return this;
      }
      public Builder ClearManufactureLimit() {
        PrepareBuilder();
        result.hasManufactureLimit = false;
        result.manufactureLimit_ = 0;
        return this;
      }
      
      public bool HasPrototypeDetails {
       get { return result.hasPrototypeDetails; }
      }
      public global::swgemurpcserver.rpc.CharacterInventoryItem PrototypeDetails {
        get { return result.PrototypeDetails; }
        set { SetPrototypeDetails(value); }
      }
      public Builder SetPrototypeDetails(global::swgemurpcserver.rpc.CharacterInventoryItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPrototypeDetails = true;
        result.prototypeDetails_ = value;
        return this;
      }
      public Builder SetPrototypeDetails(global::swgemurpcserver.rpc.CharacterInventoryItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPrototypeDetails = true;
        result.prototypeDetails_ = builderForValue.Build();
        return this;
      }
      public Builder MergePrototypeDetails(global::swgemurpcserver.rpc.CharacterInventoryItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPrototypeDetails &&
            result.prototypeDetails_ != global::swgemurpcserver.rpc.CharacterInventoryItem.DefaultInstance) {
            result.prototypeDetails_ = global::swgemurpcserver.rpc.CharacterInventoryItem.CreateBuilder(result.prototypeDetails_).MergeFrom(value).BuildPartial();
        } else {
          result.prototypeDetails_ = value;
        }
        result.hasPrototypeDetails = true;
        return this;
      }
      public Builder ClearPrototypeDetails() {
        PrepareBuilder();
        result.hasPrototypeDetails = false;
        result.prototypeDetails_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::swgemurpcserver.rpc.BlueprintEntryItem> BlueprintEntriesList {
        get { return PrepareBuilder().blueprintEntries_; }
      }
      public int BlueprintEntriesCount {
        get { return result.BlueprintEntriesCount; }
      }
      public global::swgemurpcserver.rpc.BlueprintEntryItem GetBlueprintEntries(int index) {
        return result.GetBlueprintEntries(index);
      }
      public Builder SetBlueprintEntries(int index, global::swgemurpcserver.rpc.BlueprintEntryItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.blueprintEntries_[index] = value;
        return this;
      }
      public Builder SetBlueprintEntries(int index, global::swgemurpcserver.rpc.BlueprintEntryItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.blueprintEntries_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBlueprintEntries(global::swgemurpcserver.rpc.BlueprintEntryItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.blueprintEntries_.Add(value);
        return this;
      }
      public Builder AddBlueprintEntries(global::swgemurpcserver.rpc.BlueprintEntryItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.blueprintEntries_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBlueprintEntries(scg::IEnumerable<global::swgemurpcserver.rpc.BlueprintEntryItem> values) {
        PrepareBuilder();
        result.blueprintEntries_.Add(values);
        return this;
      }
      public Builder ClearBlueprintEntries() {
        PrepareBuilder();
        result.blueprintEntries_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::swgemurpcserver.rpc.IngredientItem> IngredientsList {
        get { return PrepareBuilder().ingredients_; }
      }
      public int IngredientsCount {
        get { return result.IngredientsCount; }
      }
      public global::swgemurpcserver.rpc.IngredientItem GetIngredients(int index) {
        return result.GetIngredients(index);
      }
      public Builder SetIngredients(int index, global::swgemurpcserver.rpc.IngredientItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ingredients_[index] = value;
        return this;
      }
      public Builder SetIngredients(int index, global::swgemurpcserver.rpc.IngredientItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ingredients_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddIngredients(global::swgemurpcserver.rpc.IngredientItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ingredients_.Add(value);
        return this;
      }
      public Builder AddIngredients(global::swgemurpcserver.rpc.IngredientItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.ingredients_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeIngredients(scg::IEnumerable<global::swgemurpcserver.rpc.IngredientItem> values) {
        PrepareBuilder();
        result.ingredients_.Add(values);
        return this;
      }
      public Builder ClearIngredients() {
        PrepareBuilder();
        result.ingredients_.Clear();
        return this;
      }
    }
    static ManufacturingSchematicItem() {
      object.ReferenceEquals(global::swgemurpcserver.rpc.InventoryItem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class IngredientItem : pb::GeneratedMessage<IngredientItem, IngredientItem.Builder> {
    private IngredientItem() { }
    private static readonly IngredientItem defaultInstance = new IngredientItem().MakeReadOnly();
    private static readonly string[] _ingredientItemFieldNames = new string[] { "identical", "ingredient", "ingredient_slot_name", "required_quantity" };
    private static readonly uint[] _ingredientItemFieldTags = new uint[] { 16, 34, 26, 8 };
    public static IngredientItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override IngredientItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override IngredientItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_IngredientItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<IngredientItem, IngredientItem.Builder> InternalFieldAccessors {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_IngredientItem__FieldAccessorTable; }
    }
    
    public const int RequiredQuantityFieldNumber = 1;
    private bool hasRequiredQuantity;
    private int requiredQuantity_;
    public bool HasRequiredQuantity {
      get { return hasRequiredQuantity; }
    }
    public int RequiredQuantity {
      get { return requiredQuantity_; }
    }
    
    public const int IdenticalFieldNumber = 2;
    private bool hasIdentical;
    private bool identical_;
    public bool HasIdentical {
      get { return hasIdentical; }
    }
    public bool Identical {
      get { return identical_; }
    }
    
    public const int IngredientSlotNameFieldNumber = 3;
    private bool hasIngredientSlotName;
    private string ingredientSlotName_ = "";
    public bool HasIngredientSlotName {
      get { return hasIngredientSlotName; }
    }
    public string IngredientSlotName {
      get { return ingredientSlotName_; }
    }
    
    public const int IngredientFieldNumber = 4;
    private bool hasIngredient;
    private global::swgemurpcserver.rpc.CharacterInventoryItem ingredient_;
    public bool HasIngredient {
      get { return hasIngredient; }
    }
    public global::swgemurpcserver.rpc.CharacterInventoryItem Ingredient {
      get { return ingredient_ ?? global::swgemurpcserver.rpc.CharacterInventoryItem.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRequiredQuantity) return false;
        if (!hasIdentical) return false;
        if (!hasIngredientSlotName) return false;
        if (!hasIngredient) return false;
        if (!Ingredient.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _ingredientItemFieldNames;
      if (hasRequiredQuantity) {
        output.WriteInt32(1, field_names[3], RequiredQuantity);
      }
      if (hasIdentical) {
        output.WriteBool(2, field_names[0], Identical);
      }
      if (hasIngredientSlotName) {
        output.WriteString(3, field_names[2], IngredientSlotName);
      }
      if (hasIngredient) {
        output.WriteMessage(4, field_names[1], Ingredient);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRequiredQuantity) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, RequiredQuantity);
        }
        if (hasIdentical) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, Identical);
        }
        if (hasIngredientSlotName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, IngredientSlotName);
        }
        if (hasIngredient) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Ingredient);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static IngredientItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IngredientItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IngredientItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static IngredientItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static IngredientItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IngredientItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static IngredientItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static IngredientItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static IngredientItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static IngredientItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private IngredientItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(IngredientItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<IngredientItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(IngredientItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private IngredientItem result;
      
      private IngredientItem PrepareBuilder() {
        if (resultIsReadOnly) {
          IngredientItem original = result;
          result = new IngredientItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override IngredientItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::swgemurpcserver.rpc.IngredientItem.Descriptor; }
      }
      
      public override IngredientItem DefaultInstanceForType {
        get { return global::swgemurpcserver.rpc.IngredientItem.DefaultInstance; }
      }
      
      public override IngredientItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is IngredientItem) {
          return MergeFrom((IngredientItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(IngredientItem other) {
        if (other == global::swgemurpcserver.rpc.IngredientItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRequiredQuantity) {
          RequiredQuantity = other.RequiredQuantity;
        }
        if (other.HasIdentical) {
          Identical = other.Identical;
        }
        if (other.HasIngredientSlotName) {
          IngredientSlotName = other.IngredientSlotName;
        }
        if (other.HasIngredient) {
          MergeIngredient(other.Ingredient);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_ingredientItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _ingredientItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRequiredQuantity = input.ReadInt32(ref result.requiredQuantity_);
              break;
            }
            case 16: {
              result.hasIdentical = input.ReadBool(ref result.identical_);
              break;
            }
            case 26: {
              result.hasIngredientSlotName = input.ReadString(ref result.ingredientSlotName_);
              break;
            }
            case 34: {
              global::swgemurpcserver.rpc.CharacterInventoryItem.Builder subBuilder = global::swgemurpcserver.rpc.CharacterInventoryItem.CreateBuilder();
              if (result.hasIngredient) {
                subBuilder.MergeFrom(Ingredient);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Ingredient = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRequiredQuantity {
        get { return result.hasRequiredQuantity; }
      }
      public int RequiredQuantity {
        get { return result.RequiredQuantity; }
        set { SetRequiredQuantity(value); }
      }
      public Builder SetRequiredQuantity(int value) {
        PrepareBuilder();
        result.hasRequiredQuantity = true;
        result.requiredQuantity_ = value;
        return this;
      }
      public Builder ClearRequiredQuantity() {
        PrepareBuilder();
        result.hasRequiredQuantity = false;
        result.requiredQuantity_ = 0;
        return this;
      }
      
      public bool HasIdentical {
        get { return result.hasIdentical; }
      }
      public bool Identical {
        get { return result.Identical; }
        set { SetIdentical(value); }
      }
      public Builder SetIdentical(bool value) {
        PrepareBuilder();
        result.hasIdentical = true;
        result.identical_ = value;
        return this;
      }
      public Builder ClearIdentical() {
        PrepareBuilder();
        result.hasIdentical = false;
        result.identical_ = false;
        return this;
      }
      
      public bool HasIngredientSlotName {
        get { return result.hasIngredientSlotName; }
      }
      public string IngredientSlotName {
        get { return result.IngredientSlotName; }
        set { SetIngredientSlotName(value); }
      }
      public Builder SetIngredientSlotName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIngredientSlotName = true;
        result.ingredientSlotName_ = value;
        return this;
      }
      public Builder ClearIngredientSlotName() {
        PrepareBuilder();
        result.hasIngredientSlotName = false;
        result.ingredientSlotName_ = "";
        return this;
      }
      
      public bool HasIngredient {
       get { return result.hasIngredient; }
      }
      public global::swgemurpcserver.rpc.CharacterInventoryItem Ingredient {
        get { return result.Ingredient; }
        set { SetIngredient(value); }
      }
      public Builder SetIngredient(global::swgemurpcserver.rpc.CharacterInventoryItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIngredient = true;
        result.ingredient_ = value;
        return this;
      }
      public Builder SetIngredient(global::swgemurpcserver.rpc.CharacterInventoryItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasIngredient = true;
        result.ingredient_ = builderForValue.Build();
        return this;
      }
      public Builder MergeIngredient(global::swgemurpcserver.rpc.CharacterInventoryItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasIngredient &&
            result.ingredient_ != global::swgemurpcserver.rpc.CharacterInventoryItem.DefaultInstance) {
            result.ingredient_ = global::swgemurpcserver.rpc.CharacterInventoryItem.CreateBuilder(result.ingredient_).MergeFrom(value).BuildPartial();
        } else {
          result.ingredient_ = value;
        }
        result.hasIngredient = true;
        return this;
      }
      public Builder ClearIngredient() {
        PrepareBuilder();
        result.hasIngredient = false;
        result.ingredient_ = null;
        return this;
      }
    }
    static IngredientItem() {
      object.ReferenceEquals(global::swgemurpcserver.rpc.InventoryItem.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class BlueprintEntryItem : pb::GeneratedMessage<BlueprintEntryItem, BlueprintEntryItem.Builder> {
    private BlueprintEntryItem() { }
    private static readonly BlueprintEntryItem defaultInstance = new BlueprintEntryItem().MakeReadOnly();
    private static readonly string[] _blueprintEntryItemFieldNames = new string[] { "display_name", "identical", "key", "quantity", "serial", "type" };
    private static readonly uint[] _blueprintEntryItemFieldTags = new uint[] { 34, 48, 18, 40, 26, 10 };
    public static BlueprintEntryItem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BlueprintEntryItem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BlueprintEntryItem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_BlueprintEntryItem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BlueprintEntryItem, BlueprintEntryItem.Builder> InternalFieldAccessors {
      get { return global::swgemurpcserver.rpc.InventoryItem.internal__static_swgemurpcserver_rpc_BlueprintEntryItem__FieldAccessorTable; }
    }
    
    public const int TypeFieldNumber = 1;
    private bool hasType;
    private string type_ = "";
    public bool HasType {
      get { return hasType; }
    }
    public string Type {
      get { return type_; }
    }
    
    public const int KeyFieldNumber = 2;
    private bool hasKey;
    private string key_ = "";
    public bool HasKey {
      get { return hasKey; }
    }
    public string Key {
      get { return key_; }
    }
    
    public const int SerialFieldNumber = 3;
    private bool hasSerial;
    private string serial_ = "";
    public bool HasSerial {
      get { return hasSerial; }
    }
    public string Serial {
      get { return serial_; }
    }
    
    public const int DisplayNameFieldNumber = 4;
    private bool hasDisplayName;
    private string displayName_ = "";
    public bool HasDisplayName {
      get { return hasDisplayName; }
    }
    public string DisplayName {
      get { return displayName_; }
    }
    
    public const int QuantityFieldNumber = 5;
    private bool hasQuantity;
    private int quantity_;
    public bool HasQuantity {
      get { return hasQuantity; }
    }
    public int Quantity {
      get { return quantity_; }
    }
    
    public const int IdenticalFieldNumber = 6;
    private bool hasIdentical;
    private bool identical_;
    public bool HasIdentical {
      get { return hasIdentical; }
    }
    public bool Identical {
      get { return identical_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasType) return false;
        if (!hasKey) return false;
        if (!hasSerial) return false;
        if (!hasDisplayName) return false;
        if (!hasQuantity) return false;
        if (!hasIdentical) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _blueprintEntryItemFieldNames;
      if (hasType) {
        output.WriteString(1, field_names[5], Type);
      }
      if (hasKey) {
        output.WriteString(2, field_names[2], Key);
      }
      if (hasSerial) {
        output.WriteString(3, field_names[4], Serial);
      }
      if (hasDisplayName) {
        output.WriteString(4, field_names[0], DisplayName);
      }
      if (hasQuantity) {
        output.WriteInt32(5, field_names[3], Quantity);
      }
      if (hasIdentical) {
        output.WriteBool(6, field_names[1], Identical);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasType) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Type);
        }
        if (hasKey) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Key);
        }
        if (hasSerial) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Serial);
        }
        if (hasDisplayName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, DisplayName);
        }
        if (hasQuantity) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Quantity);
        }
        if (hasIdentical) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, Identical);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BlueprintEntryItem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BlueprintEntryItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BlueprintEntryItem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BlueprintEntryItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BlueprintEntryItem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BlueprintEntryItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BlueprintEntryItem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BlueprintEntryItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BlueprintEntryItem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BlueprintEntryItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BlueprintEntryItem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BlueprintEntryItem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<BlueprintEntryItem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BlueprintEntryItem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BlueprintEntryItem result;
      
      private BlueprintEntryItem PrepareBuilder() {
        if (resultIsReadOnly) {
          BlueprintEntryItem original = result;
          result = new BlueprintEntryItem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BlueprintEntryItem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::swgemurpcserver.rpc.BlueprintEntryItem.Descriptor; }
      }
      
      public override BlueprintEntryItem DefaultInstanceForType {
        get { return global::swgemurpcserver.rpc.BlueprintEntryItem.DefaultInstance; }
      }
      
      public override BlueprintEntryItem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BlueprintEntryItem) {
          return MergeFrom((BlueprintEntryItem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BlueprintEntryItem other) {
        if (other == global::swgemurpcserver.rpc.BlueprintEntryItem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasSerial) {
          Serial = other.Serial;
        }
        if (other.HasDisplayName) {
          DisplayName = other.DisplayName;
        }
        if (other.HasQuantity) {
          Quantity = other.Quantity;
        }
        if (other.HasIdentical) {
          Identical = other.Identical;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_blueprintEntryItemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _blueprintEntryItemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasType = input.ReadString(ref result.type_);
              break;
            }
            case 18: {
              result.hasKey = input.ReadString(ref result.key_);
              break;
            }
            case 26: {
              result.hasSerial = input.ReadString(ref result.serial_);
              break;
            }
            case 34: {
              result.hasDisplayName = input.ReadString(ref result.displayName_);
              break;
            }
            case 40: {
              result.hasQuantity = input.ReadInt32(ref result.quantity_);
              break;
            }
            case 48: {
              result.hasIdentical = input.ReadBool(ref result.identical_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasType {
        get { return result.hasType; }
      }
      public string Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = "";
        return this;
      }
      
      public bool HasKey {
        get { return result.hasKey; }
      }
      public string Key {
        get { return result.Key; }
        set { SetKey(value); }
      }
      public Builder SetKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKey = true;
        result.key_ = value;
        return this;
      }
      public Builder ClearKey() {
        PrepareBuilder();
        result.hasKey = false;
        result.key_ = "";
        return this;
      }
      
      public bool HasSerial {
        get { return result.hasSerial; }
      }
      public string Serial {
        get { return result.Serial; }
        set { SetSerial(value); }
      }
      public Builder SetSerial(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSerial = true;
        result.serial_ = value;
        return this;
      }
      public Builder ClearSerial() {
        PrepareBuilder();
        result.hasSerial = false;
        result.serial_ = "";
        return this;
      }
      
      public bool HasDisplayName {
        get { return result.hasDisplayName; }
      }
      public string DisplayName {
        get { return result.DisplayName; }
        set { SetDisplayName(value); }
      }
      public Builder SetDisplayName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDisplayName = true;
        result.displayName_ = value;
        return this;
      }
      public Builder ClearDisplayName() {
        PrepareBuilder();
        result.hasDisplayName = false;
        result.displayName_ = "";
        return this;
      }
      
      public bool HasQuantity {
        get { return result.hasQuantity; }
      }
      public int Quantity {
        get { return result.Quantity; }
        set { SetQuantity(value); }
      }
      public Builder SetQuantity(int value) {
        PrepareBuilder();
        result.hasQuantity = true;
        result.quantity_ = value;
        return this;
      }
      public Builder ClearQuantity() {
        PrepareBuilder();
        result.hasQuantity = false;
        result.quantity_ = 0;
        return this;
      }
      
      public bool HasIdentical {
        get { return result.hasIdentical; }
      }
      public bool Identical {
        get { return result.Identical; }
        set { SetIdentical(value); }
      }
      public Builder SetIdentical(bool value) {
        PrepareBuilder();
        result.hasIdentical = true;
        result.identical_ = value;
        return this;
      }
      public Builder ClearIdentical() {
        PrepareBuilder();
        result.hasIdentical = false;
        result.identical_ = false;
        return this;
      }
    }
    static BlueprintEntryItem() {
      object.ReferenceEquals(global::swgemurpcserver.rpc.InventoryItem.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
